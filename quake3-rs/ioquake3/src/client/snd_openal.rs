use ::libc;

pub mod q_shared_h {

    #[inline]

    pub unsafe extern "C" fn VectorLength(
        mut v: *const crate::src::qcommon::q_shared::vec_t,
    ) -> crate::src::qcommon::q_shared::vec_t {
        return crate::stdlib::sqrt(
            (*v.offset(0) * *v.offset(0)
                + *v.offset(1) * *v.offset(1)
                + *v.offset(2) * *v.offset(2)) as f64,
        ) as crate::src::qcommon::q_shared::vec_t;
    }
    #[inline]

    pub unsafe extern "C" fn Distance(
        mut p1: *const crate::src::qcommon::q_shared::vec_t,
        mut p2: *const crate::src::qcommon::q_shared::vec_t,
    ) -> crate::src::qcommon::q_shared::vec_t {
        let mut v: crate::src::qcommon::q_shared::vec3_t = [0.; 3];
        v[0] = *p2.offset(0) - *p1.offset(0);
        v[1] = *p2.offset(1) - *p1.offset(1);
        v[2] = *p2.offset(2) - *p1.offset(2);
        return VectorLength(v.as_mut_ptr() as *const crate::src::qcommon::q_shared::vec_t);
    }
    #[inline]

    pub unsafe extern "C" fn DistanceSquared(
        mut p1: *const crate::src::qcommon::q_shared::vec_t,
        mut p2: *const crate::src::qcommon::q_shared::vec_t,
    ) -> crate::src::qcommon::q_shared::vec_t {
        let mut v: crate::src::qcommon::q_shared::vec3_t = [0.; 3];
        v[0] = *p2.offset(0) - *p1.offset(0);
        v[1] = *p2.offset(1) - *p1.offset(1);
        v[2] = *p2.offset(2) - *p1.offset(2);
        return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
    }

    // __Q_SHARED_H
}

pub use crate::al_h::ALchar;
pub use crate::al_h::ALenum;
pub use crate::al_h::ALfloat;
pub use crate::al_h::ALint;
pub use crate::al_h::ALsizei;
pub use crate::al_h::ALuint;
pub use crate::al_h::ALvoid;
pub use crate::al_h::LPALBUFFERDATA;
pub use crate::al_h::LPALDELETEBUFFERS;
pub use crate::al_h::LPALDELETESOURCES;
pub use crate::al_h::LPALDISTANCEMODEL;
pub use crate::al_h::LPALDOPPLERFACTOR;
pub use crate::al_h::LPALGENBUFFERS;
pub use crate::al_h::LPALGENSOURCES;
pub use crate::al_h::LPALGETERROR;
pub use crate::al_h::LPALGETSOURCEF;
pub use crate::al_h::LPALGETSOURCEI;
pub use crate::al_h::LPALGETSTRING;
pub use crate::al_h::LPALLISTENERF;
pub use crate::al_h::LPALLISTENERFV;
pub use crate::al_h::LPALSOURCE3F;
pub use crate::al_h::LPALSOURCEF;
pub use crate::al_h::LPALSOURCEFV;
pub use crate::al_h::LPALSOURCEI;
pub use crate::al_h::LPALSOURCEPLAY;
pub use crate::al_h::LPALSOURCEQUEUEBUFFERS;
pub use crate::al_h::LPALSOURCESTOP;
pub use crate::al_h::LPALSOURCEUNQUEUEBUFFERS;
pub use crate::al_h::LPALSPEEDOFSOUND;
pub use crate::alc_h::ALCboolean;
pub use crate::alc_h::ALCchar;
pub use crate::alc_h::ALCcontext;
pub use crate::alc_h::ALCcontext_struct;
pub use crate::alc_h::ALCdevice;
pub use crate::alc_h::ALCdevice_struct;
pub use crate::alc_h::ALCenum;
pub use crate::alc_h::ALCint;
pub use crate::alc_h::ALCsizei;
pub use crate::alc_h::ALCuint;
pub use crate::alc_h::ALCvoid;
pub use crate::alc_h::LPALCCAPTURECLOSEDEVICE;
pub use crate::alc_h::LPALCCAPTUREOPENDEVICE;
pub use crate::alc_h::LPALCCAPTURESAMPLES;
pub use crate::alc_h::LPALCCAPTURESTART;
pub use crate::alc_h::LPALCCAPTURESTOP;
pub use crate::alc_h::LPALCCLOSEDEVICE;
pub use crate::alc_h::LPALCCREATECONTEXT;
pub use crate::alc_h::LPALCDESTROYCONTEXT;
pub use crate::alc_h::LPALCGETINTEGERV;
pub use crate::alc_h::LPALCGETSTRING;
pub use crate::alc_h::LPALCISEXTENSIONPRESENT;
pub use crate::alc_h::LPALCMAKECONTEXTCURRENT;
pub use crate::alc_h::LPALCOPENDEVICE;
pub use crate::be_aas_h::C2RustUnnamed_0;
pub use crate::snd_local_h::alSrcPriority_t;
pub use crate::snd_local_h::soundInterface_t;
pub use crate::snd_local_h::srcHandle_t;
pub use crate::snd_local_h::SRCPRI_AMBIENT;
pub use crate::snd_local_h::SRCPRI_ENTITY;
pub use crate::snd_local_h::SRCPRI_LOCAL;
pub use crate::snd_local_h::SRCPRI_ONESHOT;
pub use crate::snd_local_h::SRCPRI_STREAM;

pub use crate::src::client::snd_codec::snd_codec_s;
pub use crate::src::client::snd_codec::snd_codec_t;
pub use crate::src::client::snd_codec::snd_info_s;
pub use crate::src::client::snd_codec::snd_info_t;
pub use crate::src::client::snd_codec::snd_stream_s;
pub use crate::src::client::snd_codec::snd_stream_t;
pub use crate::src::client::snd_codec::S_CodecCloseStream;
pub use crate::src::client::snd_codec::S_CodecLoad;
pub use crate::src::client::snd_codec::S_CodecOpenStream;
pub use crate::src::client::snd_codec::S_CodecReadStream;
pub use crate::src::client::snd_codec::CODEC_CLOSE;
pub use crate::src::client::snd_codec::CODEC_LOAD;
pub use crate::src::client::snd_codec::CODEC_OPEN;
pub use crate::src::client::snd_codec::CODEC_READ;
pub use crate::src::client::snd_main::s_doppler;
pub use crate::src::client::snd_main::s_musicVolume;
pub use crate::src::client::snd_main::s_muted;
pub use crate::src::client::snd_main::s_volume;
pub use crate::src::client::snd_openal::q_shared_h::Distance;
pub use crate::src::client::snd_openal::q_shared_h::DistanceSquared;
pub use crate::src::client::snd_openal::q_shared_h::VectorLength;

pub use crate::src::qcommon::common::Com_Error;

pub use crate::src::qcommon::common::Com_Printf;

pub use crate::src::qcommon::q_math::vec3_origin;
pub use crate::src::qcommon::q_math::Q_isnan;
pub use crate::src::qcommon::q_shared::byte;
pub use crate::src::qcommon::q_shared::cvar_s;
pub use crate::src::qcommon::q_shared::cvar_t;
pub use crate::src::qcommon::q_shared::fileHandle_t;
pub use crate::src::qcommon::q_shared::qboolean;
pub use crate::src::qcommon::q_shared::qfalse;
pub use crate::src::qcommon::q_shared::qtrue;
pub use crate::src::qcommon::q_shared::sfxHandle_t;
pub use crate::src::qcommon::q_shared::vec3_t;
pub use crate::src::qcommon::q_shared::vec_t;
pub use crate::src::qcommon::q_shared::Q_strcat;
pub use crate::src::qcommon::q_shared::Q_stricmp;
pub use crate::src::qcommon::q_shared::Q_strncpyz;
pub use crate::src::qcommon::q_shared::ERR_DISCONNECT;
pub use crate::src::qcommon::q_shared::ERR_DROP;
pub use crate::src::qcommon::q_shared::ERR_FATAL;
pub use crate::src::qcommon::q_shared::ERR_NEED_CD;
pub use crate::src::qcommon::q_shared::ERR_SERVERDISCONNECT;

//===========================================================================

pub type src_t = src_s;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct src_s {
    pub alSource: crate::al_h::ALuint,
    pub sfx: crate::src::qcommon::q_shared::sfxHandle_t,
    pub lastUsedTime: i32,
    pub priority: crate::snd_local_h::alSrcPriority_t,
    pub entity: i32,
    pub channel: i32,
    pub isActive: crate::src::qcommon::q_shared::qboolean,
    pub isPlaying: crate::src::qcommon::q_shared::qboolean,
    pub isLocked: crate::src::qcommon::q_shared::qboolean,
    pub isLooping: crate::src::qcommon::q_shared::qboolean,
    pub isTracking: crate::src::qcommon::q_shared::qboolean,
    pub isStream: crate::src::qcommon::q_shared::qboolean,
    pub curGain: f32,
    pub scaleGain: f32,
    pub lastTimePos: f32,
    pub lastSampleTime: i32,
    pub loopSpeakerPos: crate::src::qcommon::q_shared::vec3_t,
    pub local: crate::src::qcommon::q_shared::qboolean,
}
// OpenAL source object
// Sound effect in use
// Last time used
// Priority
// Owning entity (-1 if none)
// Associated channel (-1 if none)
// Is this source currently in use?
// Is this source currently playing, or stopped?
// This is locked (un-allocatable)
// Is this a looping effect (attached to an entity)
// Is this object tracking its owner
// Is this source a stream
// gain employed if source is within maxdistance.
// Last gain value for this source. 0 if muted.
// On stopped loops, the last position in the buffer
// Time when this was stopped
// Origin of the loop speaker
// Is this local (relative to the cam)
//===========================================================================

pub type alSfx_t = alSfx_s;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct alSfx_s {
    pub filename: [i8; 64],
    pub buffer: crate::al_h::ALuint,
    pub info: crate::src::client::snd_codec::snd_info_t,
    pub isDefault: crate::src::qcommon::q_shared::qboolean,
    pub isDefaultChecked: crate::src::qcommon::q_shared::qboolean,
    pub inMemory: crate::src::qcommon::q_shared::qboolean,
    pub isLocked: crate::src::qcommon::q_shared::qboolean,
    pub lastUsedTime: i32,
    pub loopCnt: i32,
    pub loopActiveCnt: i32,
    pub masterLoopSrc: i32,
}

pub type sentity_t = sentity_s;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct sentity_s {
    pub origin: crate::src::qcommon::q_shared::vec3_t,
    pub srcAllocated: crate::src::qcommon::q_shared::qboolean,
    pub srcIndex: i32,
    pub loopAddedThisFrame: crate::src::qcommon::q_shared::qboolean,
    pub loopPriority: crate::snd_local_h::alSrcPriority_t,
    pub loopSfx: crate::src::qcommon::q_shared::sfxHandle_t,
    pub startLoopingSound: crate::src::qcommon::q_shared::qboolean,
}
// OpenAL buffer
// information for this sound like rate, sample count..
// Couldn't be loaded - use default FX
// Sound has been check if it isDefault
// Sound is stored in memory
// Sound is locked (can not be unloaded)
// Time last used
// number of loops using this sfx
// number of playing loops using this sfx
// All other sources looping this buffer are synced to this master src
// If a src_t has been allocated to this entity
/*
===========================================================================
Copyright (C) 1999-2005 Id Software, Inc.
Copyright (C) 2005 Stuart Dalton (badcdev@gmail.com)

This file is part of Quake III Arena source code.

Quake III Arena source code is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

Quake III Arena source code is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Quake III Arena source code; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
===========================================================================
*/
// Console variables specific to OpenAL
#[no_mangle]

pub static mut s_alPrecache: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alGain: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alSources: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alDopplerFactor: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alDopplerSpeed: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alMinDistance: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alMaxDistance: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alRolloff: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alGraceDistance: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alDriver: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alDevice: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alInputDevice: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alAvailableDevices: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
#[no_mangle]

pub static mut s_alAvailableInputDevices: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;

static mut enumeration_ext: crate::src::qcommon::q_shared::qboolean =
    crate::src::qcommon::q_shared::qfalse;

static mut enumeration_all_ext: crate::src::qcommon::q_shared::qboolean =
    crate::src::qcommon::q_shared::qfalse;

static mut capture_ext: crate::src::qcommon::q_shared::qboolean =
    crate::src::qcommon::q_shared::qfalse;
/*
=================
S_AL_Format
=================
*/

unsafe extern "C" fn S_AL_Format(mut width: i32, mut channels: i32) -> crate::al_h::ALuint {
    let mut format: crate::al_h::ALuint = 0x1101;
    // Work out format
    if width == 1 {
        if channels == 1 {
            format = 0x1100
        } else if channels == 2 {
            format = 0x1102
        }
    } else if width == 2 {
        if channels == 1 {
            format = 0x1101
        } else if channels == 2 {
            format = 0x1103
        }
    }
    return format;
}
/*
=================
S_AL_ErrorMsg
=================
*/

unsafe extern "C" fn S_AL_ErrorMsg(mut error: crate::al_h::ALenum) -> *const i8 {
    match error {
        0 => return b"No error\x00" as *const u8 as *const i8,
        40961 => return b"Invalid name\x00" as *const u8 as *const i8,
        40962 => return b"Invalid enumerator\x00" as *const u8 as *const i8,
        40963 => return b"Invalid value\x00" as *const u8 as *const i8,
        40964 => return b"Invalid operation\x00" as *const u8 as *const i8,
        40965 => return b"Out of memory\x00" as *const u8 as *const i8,
        _ => return b"Unknown error\x00" as *const u8 as *const i8,
    };
}
/*
=================
S_AL_ClearError
=================
*/

unsafe extern "C" fn S_AL_ClearError(mut quiet: crate::src::qcommon::q_shared::qboolean) {
    let mut error: i32 = crate::src::client::qal::qalGetError.expect("non-null function pointer")();
    if quiet as u64 != 0 {
        return;
    }
    if error != 0 {
        crate::src::qcommon::common::Com_Printf(
            b"^3WARNING: unhandled AL error: %s\n\x00" as *const u8 as *const i8,
            S_AL_ErrorMsg(error),
        );
    };
}

static mut alBuffersInitialised: crate::src::qcommon::q_shared::qboolean =
    crate::src::qcommon::q_shared::qfalse;

static mut knownSfx: [alSfx_t; 4096] = [alSfx_t {
    filename: [0; 64],
    buffer: 0,
    info: crate::src::client::snd_codec::snd_info_t {
        rate: 0,
        width: 0,
        channels: 0,
        samples: 0,
        size: 0,
        dataofs: 0,
    },
    isDefault: crate::src::qcommon::q_shared::qfalse,
    isDefaultChecked: crate::src::qcommon::q_shared::qfalse,
    inMemory: crate::src::qcommon::q_shared::qfalse,
    isLocked: crate::src::qcommon::q_shared::qfalse,
    lastUsedTime: 0,
    loopCnt: 0,
    loopActiveCnt: 0,
    masterLoopSrc: 0,
}; 4096];

static mut numSfx: crate::src::qcommon::q_shared::sfxHandle_t = 0;

static mut default_sfx: crate::src::qcommon::q_shared::sfxHandle_t = 0;
/*
=================
S_AL_BufferFindFree

Find a free handle
=================
*/

unsafe extern "C" fn S_AL_BufferFindFree() -> crate::src::qcommon::q_shared::sfxHandle_t {
    let mut _i: i32 = 0;

    for i in 0..4096 {
        if knownSfx[i as usize].filename[0] as i32 == '\u{0}' as i32 {
            if i >= numSfx {
                numSfx = i + 1
            }
            return i;
        }
    }
    // Shit...
    crate::src::qcommon::common::Com_Error(
        crate::src::qcommon::q_shared::ERR_FATAL as i32,
        b"S_AL_BufferFindFree: No free sound handles\x00" as *const u8 as *const i8,
    );
}
/*
=================
S_AL_BufferFind

Find a sound effect if loaded, set up a handle otherwise
=================
*/

unsafe extern "C" fn S_AL_BufferFind(
    mut filename: *const i8,
) -> crate::src::qcommon::q_shared::sfxHandle_t {
    // Look it up in the table
    let mut sfx: crate::src::qcommon::q_shared::sfxHandle_t = -(1);
    let mut i: i32 = 0;
    if filename.is_null() {
        crate::src::qcommon::common::Com_Error(
            crate::src::qcommon::q_shared::ERR_FATAL as i32,
            b"Sound name is NULL\x00" as *const u8 as *const i8,
        );
    }
    if *filename.offset(0) == 0 {
        crate::src::qcommon::common::Com_Printf(
            b"^3WARNING: Sound name is empty\n\x00" as *const u8 as *const i8,
        );
        return 0i32;
    }
    if crate::stdlib::strlen(filename) >= 64 {
        crate::src::qcommon::common::Com_Printf(
            b"^3WARNING: Sound name is too long: %s\n\x00" as *const u8 as *const i8,
            filename,
        );
        return 0i32;
    }
    if *filename.offset(0) as i32 == '*' as i32 {
        crate::src::qcommon::common::Com_Printf(
            b"^3WARNING: Tried to load player sound directly: %s\n\x00" as *const u8 as *const i8,
            filename,
        );
        return 0i32;
    }
    i = 0;
    while i < numSfx {
        if crate::src::qcommon::q_shared::Q_stricmp(
            knownSfx[i as usize].filename.as_mut_ptr(),
            filename,
        ) == 0
        {
            sfx = i;
            break;
        } else {
            i += 1
        }
    }
    // Not found in table?
    if sfx == -(1) {
        let mut ptr: *mut alSfx_t = 0 as *mut alSfx_t;
        sfx = S_AL_BufferFindFree();
        // Clear and copy the filename over
        ptr = &mut *knownSfx.as_mut_ptr().offset(sfx as isize) as *mut alSfx_t;
        crate::stdlib::memset(
            ptr as *mut libc::c_void,
            0,
            ::std::mem::size_of::<alSfx_t>(),
        );
        (*ptr).masterLoopSrc = -(1);
        crate::stdlib::strcpy((*ptr).filename.as_mut_ptr(), filename);
    }
    // Return the handle
    return sfx;
}
/*
=================
S_AL_BufferUseDefault
=================
*/

unsafe extern "C" fn S_AL_BufferUseDefault(mut sfx: crate::src::qcommon::q_shared::sfxHandle_t) {
    if sfx == default_sfx {
        crate::src::qcommon::common::Com_Error(
            crate::src::qcommon::q_shared::ERR_FATAL as i32,
            b"Can\'t load default sound effect %s\x00" as *const u8 as *const i8,
            knownSfx[sfx as usize].filename.as_mut_ptr(),
        );
    }
    crate::src::qcommon::common::Com_Printf(
        b"^3WARNING: Using default sound for %s\n\x00" as *const u8 as *const i8,
        knownSfx[sfx as usize].filename.as_mut_ptr(),
    );
    knownSfx[sfx as usize].isDefault = crate::src::qcommon::q_shared::qtrue;
    knownSfx[sfx as usize].buffer = knownSfx[default_sfx as usize].buffer;
}
/*
=================
S_AL_BufferUnload
=================
*/

unsafe extern "C" fn S_AL_BufferUnload(mut sfx: crate::src::qcommon::q_shared::sfxHandle_t) {
    if knownSfx[sfx as usize].filename[0] as i32 == '\u{0}' as i32 {
        return;
    }
    if knownSfx[sfx as usize].inMemory as u64 == 0 {
        return;
    }
    // Delete it
    S_AL_ClearError(crate::src::qcommon::q_shared::qfalse);
    crate::src::client::qal::qalDeleteBuffers.expect("non-null function pointer")(
        1,
        &mut (*knownSfx.as_mut_ptr().offset(sfx as isize)).buffer,
    );
    if crate::src::client::qal::qalGetError.expect("non-null function pointer")() != 0 {
        crate::src::qcommon::common::Com_Printf(
            b"^1ERROR: Can\'t delete sound buffer for %s\n\x00" as *const u8 as *const i8,
            knownSfx[sfx as usize].filename.as_mut_ptr(),
        );
    }
    knownSfx[sfx as usize].inMemory = crate::src::qcommon::q_shared::qfalse;
}
/*
=================
S_AL_BufferEvict
=================
*/

unsafe extern "C" fn S_AL_BufferEvict() -> crate::src::qcommon::q_shared::qboolean {
    let mut _i: i32 = 0;
    let mut oldestBuffer: i32 = -(1);
    let mut oldestTime: i32 = crate::src::sys::sys_unix::Sys_Milliseconds();

    for i in 0..numSfx {
        if !(knownSfx[i as usize].filename[0] == 0) {
            if !(knownSfx[i as usize].inMemory as u64 == 0) {
                if knownSfx[i as usize].lastUsedTime < oldestTime {
                    oldestTime = knownSfx[i as usize].lastUsedTime;
                    oldestBuffer = i
                }
            }
        }
    }
    if oldestBuffer >= 0 {
        S_AL_BufferUnload(oldestBuffer);
        return crate::src::qcommon::q_shared::qtrue;
    } else {
        return crate::src::qcommon::q_shared::qfalse;
    };
}
/*
=================
S_AL_GenBuffers
=================
*/

unsafe extern "C" fn S_AL_GenBuffers(
    mut numBuffers: crate::al_h::ALsizei,
    mut buffers: *mut crate::al_h::ALuint,
    mut name: *const i8,
) -> crate::src::qcommon::q_shared::qboolean {
    let mut error: crate::al_h::ALenum = 0;
    S_AL_ClearError(crate::src::qcommon::q_shared::qfalse);
    crate::src::client::qal::qalGenBuffers.expect("non-null function pointer")(numBuffers, buffers);
    error = crate::src::client::qal::qalGetError.expect("non-null function pointer")();
    // If we ran out of buffers, start evicting the least recently used sounds
    while error == 0xa003 {
        if S_AL_BufferEvict() as u64 == 0 {
            crate::src::qcommon::common::Com_Printf(
                b"^1ERROR: Out of audio buffers\n\x00" as *const u8 as *const i8,
            );
            return crate::src::qcommon::q_shared::qfalse;
        }
        // Try again
        S_AL_ClearError(crate::src::qcommon::q_shared::qfalse);
        crate::src::client::qal::qalGenBuffers.expect("non-null function pointer")(
            numBuffers, buffers,
        );
        error = crate::src::client::qal::qalGetError.expect("non-null function pointer")()
    }
    if error != 0 {
        crate::src::qcommon::common::Com_Printf(
            b"^1ERROR: Can\'t create a sound buffer for %s - %s\n\x00" as *const u8 as *const i8,
            name,
            S_AL_ErrorMsg(error),
        );
        return crate::src::qcommon::q_shared::qfalse;
    }
    return crate::src::qcommon::q_shared::qtrue;
}
/*
=================
S_AL_BufferLoad
=================
*/

unsafe extern "C" fn S_AL_BufferLoad(
    mut sfx: crate::src::qcommon::q_shared::sfxHandle_t,
    mut cache: crate::src::qcommon::q_shared::qboolean,
) {
    let mut error: crate::al_h::ALenum = 0;
    let mut format: crate::al_h::ALuint = 0;
    let mut data: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut info: crate::src::client::snd_codec::snd_info_t =
        crate::src::client::snd_codec::snd_info_t {
            rate: 0,
            width: 0,
            channels: 0,
            samples: 0,
            size: 0,
            dataofs: 0,
        };
    let mut curSfx: *mut alSfx_t = &mut *knownSfx.as_mut_ptr().offset(sfx as isize) as *mut alSfx_t;
    // Nothing?
    if (*curSfx).filename[0] as i32 == '\u{0}' as i32 {
        return;
    }
    // Already done?
    if (*curSfx).inMemory != 0
        || (*curSfx).isDefault != 0
        || cache as u64 == 0 && (*curSfx).isDefaultChecked != 0
    {
        return;
    }
    // Try to load
    data = crate::src::client::snd_codec::S_CodecLoad((*curSfx).filename.as_mut_ptr(), &mut info);
    if data.is_null() {
        S_AL_BufferUseDefault(sfx);
        return;
    }
    (*curSfx).isDefaultChecked = crate::src::qcommon::q_shared::qtrue;
    if cache as u64 == 0 {
        // Don't create AL cache
        crate::src::qcommon::common::Hunk_FreeTempMemory(data);
        return;
    }
    format = S_AL_Format(info.width, info.channels);
    // Create a buffer
    if S_AL_GenBuffers(1, &mut (*curSfx).buffer, (*curSfx).filename.as_mut_ptr()) as u64 == 0 {
        S_AL_BufferUseDefault(sfx);
        crate::src::qcommon::common::Hunk_FreeTempMemory(data);
        return;
    }
    // Fill the buffer
    if info.size == 0 {
        // We have no data to buffer, so buffer silence
        let mut dummyData: [crate::src::qcommon::q_shared::byte; 2] = [0, 0];
        crate::src::client::qal::qalBufferData.expect("non-null function pointer")(
            (*curSfx).buffer,
            0x1101i32,
            dummyData.as_mut_ptr() as *mut libc::c_void,
            2i32,
            22050i32,
        );
    } else {
        crate::src::client::qal::qalBufferData.expect("non-null function pointer")(
            (*curSfx).buffer,
            format as crate::al_h::ALenum,
            data,
            info.size,
            info.rate,
        );
    }
    error = crate::src::client::qal::qalGetError.expect("non-null function pointer")();
    // If we ran out of memory, start evicting the least recently used sounds
    while error == 0xa005 {
        if S_AL_BufferEvict() as u64 == 0 {
            crate::src::client::qal::qalDeleteBuffers.expect("non-null function pointer")(
                1,
                &mut (*curSfx).buffer,
            );
            S_AL_BufferUseDefault(sfx);
            crate::src::qcommon::common::Hunk_FreeTempMemory(data);
            crate::src::qcommon::common::Com_Printf(
                b"^1ERROR: Out of memory loading %s\n\x00" as *const u8 as *const i8,
                (*curSfx).filename.as_mut_ptr(),
            );
            return;
        }
        // Try load it again
        crate::src::client::qal::qalBufferData.expect("non-null function pointer")(
            (*curSfx).buffer,
            format as crate::al_h::ALenum,
            data,
            info.size,
            info.rate,
        );
        error = crate::src::client::qal::qalGetError.expect("non-null function pointer")()
    }
    // Some other error condition
    if error != 0 {
        crate::src::client::qal::qalDeleteBuffers.expect("non-null function pointer")(
            1,
            &mut (*curSfx).buffer,
        );
        S_AL_BufferUseDefault(sfx);
        crate::src::qcommon::common::Hunk_FreeTempMemory(data);
        crate::src::qcommon::common::Com_Printf(
            b"^1ERROR: Can\'t fill sound buffer for %s - %s\n\x00" as *const u8 as *const i8,
            (*curSfx).filename.as_mut_ptr(),
            S_AL_ErrorMsg(error),
        );
        return;
    }
    (*curSfx).info = info;
    // Free the memory
    crate::src::qcommon::common::Hunk_FreeTempMemory(data);
    // Woo!
    (*curSfx).inMemory = crate::src::qcommon::q_shared::qtrue;
}
/*
=================
S_AL_BufferUse
=================
*/

unsafe extern "C" fn S_AL_BufferUse(mut sfx: crate::src::qcommon::q_shared::sfxHandle_t) {
    if knownSfx[sfx as usize].filename[0] as i32 == '\u{0}' as i32 {
        return;
    }
    if knownSfx[sfx as usize].inMemory as u64 == 0 && knownSfx[sfx as usize].isDefault as u64 == 0 {
        S_AL_BufferLoad(sfx, crate::src::qcommon::q_shared::qtrue);
    }
    knownSfx[sfx as usize].lastUsedTime = crate::src::sys::sys_unix::Sys_Milliseconds();
}
/*
=================
S_AL_BufferInit
=================
*/

unsafe extern "C" fn S_AL_BufferInit() -> crate::src::qcommon::q_shared::qboolean {
    if alBuffersInitialised as u64 != 0 {
        return crate::src::qcommon::q_shared::qtrue;
    }
    // Clear the hash table, and SFX table
    crate::stdlib::memset(
        knownSfx.as_mut_ptr() as *mut libc::c_void,
        0,
        ::std::mem::size_of::<[alSfx_t; 4096]>(),
    );
    numSfx = 0;
    // Load the default sound, and lock it
    default_sfx = S_AL_BufferFind(b"sound/feedback/hit.wav\x00" as *const u8 as *const i8);
    S_AL_BufferUse(default_sfx);
    knownSfx[default_sfx as usize].isLocked = crate::src::qcommon::q_shared::qtrue;
    // All done
    alBuffersInitialised = crate::src::qcommon::q_shared::qtrue;
    return crate::src::qcommon::q_shared::qtrue;
}
/*
=================
S_AL_BufferShutdown
=================
*/

unsafe extern "C" fn S_AL_BufferShutdown() {
    let mut _i: i32 = 0;
    if alBuffersInitialised as u64 == 0 {
        return;
    }
    // Unlock the default sound effect
    knownSfx[default_sfx as usize].isLocked = crate::src::qcommon::q_shared::qfalse;
    // Free all used effects

    for i in 0..numSfx {
        S_AL_BufferUnload(i);
    }
    // Clear the tables
    numSfx = 0;
    // All undone
    alBuffersInitialised = crate::src::qcommon::q_shared::qfalse;
}
/*
=================
S_AL_RegisterSound
=================
*/

unsafe extern "C" fn S_AL_RegisterSound(
    mut sample: *const i8,
    mut _compressed: crate::src::qcommon::q_shared::qboolean,
) -> crate::src::qcommon::q_shared::sfxHandle_t {
    let mut sfx: crate::src::qcommon::q_shared::sfxHandle_t = S_AL_BufferFind(sample);
    if knownSfx[sfx as usize].inMemory as u64 == 0 && knownSfx[sfx as usize].isDefault as u64 == 0 {
        S_AL_BufferLoad(
            sfx,
            (*s_alPrecache).integer as crate::src::qcommon::q_shared::qboolean,
        );
    }
    knownSfx[sfx as usize].lastUsedTime = crate::src::qcommon::common::Com_Milliseconds();
    if knownSfx[sfx as usize].isDefault as u64 != 0 {
        return 0i32;
    }
    return sfx;
}
/*
=================
S_AL_BufferGet

Return's a sfx's buffer
=================
*/

unsafe extern "C" fn S_AL_BufferGet(
    mut sfx: crate::src::qcommon::q_shared::sfxHandle_t,
) -> crate::al_h::ALuint {
    return knownSfx[sfx as usize].buffer;
}

static mut srcList: [src_t; 128] = [src_t {
    alSource: 0,
    sfx: 0,
    lastUsedTime: 0,
    priority: crate::snd_local_h::SRCPRI_AMBIENT,
    entity: 0,
    channel: 0,
    isActive: crate::src::qcommon::q_shared::qfalse,
    isPlaying: crate::src::qcommon::q_shared::qfalse,
    isLocked: crate::src::qcommon::q_shared::qfalse,
    isLooping: crate::src::qcommon::q_shared::qfalse,
    isTracking: crate::src::qcommon::q_shared::qfalse,
    isStream: crate::src::qcommon::q_shared::qfalse,
    curGain: 0.,
    scaleGain: 0.,
    lastTimePos: 0.,
    lastSampleTime: 0,
    loopSpeakerPos: [0.; 3],
    local: crate::src::qcommon::q_shared::qfalse,
}; 128];

static mut srcCount: i32 = 0;

static mut srcActiveCnt: i32 = 0;

static mut alSourcesInitialised: crate::src::qcommon::q_shared::qboolean =
    crate::src::qcommon::q_shared::qfalse;

static mut lastListenerNumber: i32 = -(1);

static mut lastListenerOrigin: crate::src::qcommon::q_shared::vec3_t = [0.0, 0.0, 0.0];

static mut entityList: [sentity_t; 1024] = [sentity_t {
    origin: [0.; 3],
    srcAllocated: crate::src::qcommon::q_shared::qfalse,
    srcIndex: 0,
    loopAddedThisFrame: crate::src::qcommon::q_shared::qfalse,
    loopPriority: crate::snd_local_h::SRCPRI_AMBIENT,
    loopSfx: 0,
    startLoopingSound: crate::src::qcommon::q_shared::qfalse,
}; 1024];
/*
=================
S_AL_SanitiseVector
=================
*/

unsafe extern "C" fn _S_AL_SanitiseVector(
    mut v: *mut crate::src::qcommon::q_shared::vec_t,
    mut line: i32,
) {
    if crate::src::qcommon::q_math::Q_isnan(*v.offset(0)) != 0
        || crate::src::qcommon::q_math::Q_isnan(*v.offset(1)) != 0
        || crate::src::qcommon::q_math::Q_isnan(*v.offset(2)) != 0
    {
        crate::src::qcommon::common::Com_DPrintf(b"^3WARNING: vector with one or more NaN components being passed to OpenAL at %s:%d -- zeroing\n\x00"
                        as *const u8 as *const i8,
                    b"code/client/snd_openal.c\x00" as *const u8 as
                        *const i8, line);
        let ref mut fresh0 = *v.offset(2);
        *fresh0 = 0f32;
        let ref mut fresh1 = *v.offset(1);
        *fresh1 = *fresh0;
        *v.offset(0) = *fresh1
    };
}
/*
=================
S_AL_Gain
Set gain to 0 if muted, otherwise set it to given value.
=================
*/

unsafe extern "C" fn S_AL_Gain(mut source: crate::al_h::ALuint, mut gainval: f32) {
    if (*crate::src::client::snd_main::s_muted).integer != 0 {
        crate::src::client::qal::qalSourcef.expect("non-null function pointer")(
            source, 0x100ai32, 0.0f32,
        );
    } else {
        crate::src::client::qal::qalSourcef.expect("non-null function pointer")(
            source, 0x100ai32, gainval,
        );
    };
}
/*
=================
S_AL_ScaleGain
Adapt the gain if necessary to get a quicker fadeout when the source is too far away.
=================
*/

unsafe extern "C" fn S_AL_ScaleGain(
    mut chksrc: *mut src_t,
    mut origin: *mut crate::src::qcommon::q_shared::vec_t,
) {
    let mut distance: f32 = 0.;
    if (*chksrc).local as u64 == 0 {
        distance = Distance(
            origin as *const crate::src::qcommon::q_shared::vec_t,
            lastListenerOrigin.as_mut_ptr() as *const crate::src::qcommon::q_shared::vec_t,
        )
    }
    // If we exceed a certain distance, scale the gain linearly until the sound
    // vanishes into nothingness.
    if (*chksrc).local as u64 == 0 && {
        distance -= (*s_alMaxDistance).value;
        (distance) > 0f32
    } {
        let mut scaleFactor: f32 = 0.;
        if distance >= (*s_alGraceDistance).value {
            scaleFactor = 0.0
        } else {
            scaleFactor = 1.0 - distance / (*s_alGraceDistance).value
        }
        scaleFactor *= (*chksrc).curGain;
        if (*chksrc).scaleGain != scaleFactor {
            (*chksrc).scaleGain = scaleFactor;
            S_AL_Gain((*chksrc).alSource, (*chksrc).scaleGain);
        }
    } else if (*chksrc).scaleGain != (*chksrc).curGain {
        (*chksrc).scaleGain = (*chksrc).curGain;
        S_AL_Gain((*chksrc).alSource, (*chksrc).scaleGain);
    };
}
/*
=================
S_AL_HearingThroughEntity

Also see S_Base_HearingThroughEntity
=================
*/

unsafe extern "C" fn S_AL_HearingThroughEntity(
    mut entityNum: i32,
) -> crate::src::qcommon::q_shared::qboolean {
    let mut distanceSq: f32 = 0.;
    if lastListenerNumber == entityNum {
        // This is an outrageous hack to detect
        // whether or not the player is rendering in third person or not. We can't
        // ask the renderer because the renderer has no notion of entities and we
        // can't ask cgame since that would involve changing the API and hence mod
        // compatibility. I don't think there is any way around this, but I'll leave
        // the FIXME just in case anyone has a bright idea.
        distanceSq = DistanceSquared(
            entityList[entityNum as usize].origin.as_mut_ptr()
                as *const crate::src::qcommon::q_shared::vec_t,
            lastListenerOrigin.as_mut_ptr() as *const crate::src::qcommon::q_shared::vec_t,
        );
        if distanceSq > 48.0 * 48.0 {
            //we're the player
            return crate::src::qcommon::q_shared::qfalse;
        } else {
            return crate::src::qcommon::q_shared::qtrue;
        }
    } else {
        return crate::src::qcommon::q_shared::qfalse;
    }; //we're the player, but third person
       //not the player
}
/*
=================
S_AL_SrcInit
=================
*/

unsafe extern "C" fn S_AL_SrcInit() -> crate::src::qcommon::q_shared::qboolean {
    let mut _i: i32 = 0;
    let mut limit: i32 = 0;
    // Clear the sources data structure
    crate::stdlib::memset(
        srcList.as_mut_ptr() as *mut libc::c_void,
        0,
        ::std::mem::size_of::<[src_t; 128]>(),
    );
    srcCount = 0;
    srcActiveCnt = 0;
    // Cap s_alSources to MAX_SRC
    limit = (*s_alSources).integer;
    if limit > 128 {
        limit = 128
    } else if limit < 16 {
        limit = 16
    }
    S_AL_ClearError(crate::src::qcommon::q_shared::qfalse);
    // Allocate as many sources as possible

    for i in 0..limit {
        crate::src::client::qal::qalGenSources.expect("non-null function pointer")(
            1,
            &mut (*srcList.as_mut_ptr().offset(i as isize)).alSource,
        );

        if crate::src::client::qal::qalGetError.expect("non-null function pointer")() != 0 {
            break;
        }

        srcCount += 1;
    }
    // All done. Print this for informational purposes
    crate::src::qcommon::common::Com_Printf(
        b"Allocated %d sources.\n\x00" as *const u8 as *const i8,
        srcCount,
    );
    alSourcesInitialised = crate::src::qcommon::q_shared::qtrue;
    return crate::src::qcommon::q_shared::qtrue;
}
/*
=================
S_AL_SrcShutdown
=================
*/

unsafe extern "C" fn S_AL_SrcShutdown() {
    let mut _i: i32 = 0;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    if alSourcesInitialised as u64 == 0 {
        return;
    }
    // Destroy all the sources

    for i in 0..srcCount {
        curSource = &mut *srcList.as_mut_ptr().offset(i as isize) as *mut src_t;

        if (*curSource).isLocked as u64 != 0 {
            crate::src::qcommon::common::Com_DPrintf(
                b"^3WARNING: Source %d is locked\n\x00" as *const u8 as *const i8,
                i,
            );
        }

        if (*curSource).entity > 0 {
            entityList[(*curSource).entity as usize].srcAllocated =
                crate::src::qcommon::q_shared::qfalse
        }

        crate::src::client::qal::qalSourceStop.expect("non-null function pointer")(
            srcList[i as usize].alSource,
        );

        crate::src::client::qal::qalDeleteSources.expect("non-null function pointer")(
            1,
            &mut (*srcList.as_mut_ptr().offset(i as isize)).alSource,
        );
    }
    crate::stdlib::memset(
        srcList.as_mut_ptr() as *mut libc::c_void,
        0,
        ::std::mem::size_of::<[src_t; 128]>(),
    );
    alSourcesInitialised = crate::src::qcommon::q_shared::qfalse;
}
/*
=================
S_AL_SrcSetup
=================
*/

unsafe extern "C" fn S_AL_SrcSetup(
    mut src: crate::snd_local_h::srcHandle_t,
    mut sfx: crate::src::qcommon::q_shared::sfxHandle_t,
    mut priority: crate::snd_local_h::alSrcPriority_t,
    mut entity: i32,
    mut channel: i32,
    mut local: crate::src::qcommon::q_shared::qboolean,
) {
    let mut curSource: *mut src_t = 0 as *mut src_t;
    // Set up src struct
    curSource = &mut *srcList.as_mut_ptr().offset(src as isize) as *mut src_t;
    (*curSource).lastUsedTime = crate::src::sys::sys_unix::Sys_Milliseconds();
    (*curSource).sfx = sfx;
    (*curSource).priority = priority;
    (*curSource).entity = entity;
    (*curSource).channel = channel;
    (*curSource).isPlaying = crate::src::qcommon::q_shared::qfalse;
    (*curSource).isLocked = crate::src::qcommon::q_shared::qfalse;
    (*curSource).isLooping = crate::src::qcommon::q_shared::qfalse;
    (*curSource).isTracking = crate::src::qcommon::q_shared::qfalse;
    (*curSource).isStream = crate::src::qcommon::q_shared::qfalse;
    (*curSource).curGain = (*s_alGain).value * (*crate::src::client::snd_main::s_volume).value;
    (*curSource).scaleGain = (*curSource).curGain;
    (*curSource).local = local;
    // Set up OpenAL source
    if sfx >= 0 {
        // Mark the SFX as used, and grab the raw AL buffer
        S_AL_BufferUse(sfx);
        crate::src::client::qal::qalSourcei.expect("non-null function pointer")(
            (*curSource).alSource,
            0x1009i32,
            S_AL_BufferGet(sfx) as crate::al_h::ALint,
        );
    }
    crate::src::client::qal::qalSourcef.expect("non-null function pointer")(
        (*curSource).alSource,
        0x1003,
        1.0f32,
    );
    S_AL_Gain((*curSource).alSource, (*curSource).curGain);
    crate::src::client::qal::qalSourcefv.expect("non-null function pointer")(
        (*curSource).alSource,
        0x1004,
        crate::src::qcommon::q_math::vec3_origin.as_mut_ptr(),
    );
    crate::src::client::qal::qalSourcefv.expect("non-null function pointer")(
        (*curSource).alSource,
        0x1006,
        crate::src::qcommon::q_math::vec3_origin.as_mut_ptr(),
    );
    crate::src::client::qal::qalSourcei.expect("non-null function pointer")(
        (*curSource).alSource,
        0x1007,
        0,
    );
    crate::src::client::qal::qalSourcef.expect("non-null function pointer")(
        (*curSource).alSource,
        0x1020,
        (*s_alMinDistance).value,
    );
    if local as u64 != 0 {
        crate::src::client::qal::qalSourcei.expect("non-null function pointer")(
            (*curSource).alSource,
            0x202,
            1,
        );
        crate::src::client::qal::qalSourcef.expect("non-null function pointer")(
            (*curSource).alSource,
            0x1021i32,
            0.0f32,
        );
    } else {
        crate::src::client::qal::qalSourcei.expect("non-null function pointer")(
            (*curSource).alSource,
            0x202,
            0,
        );
        crate::src::client::qal::qalSourcef.expect("non-null function pointer")(
            (*curSource).alSource,
            0x1021i32,
            (*s_alRolloff).value,
        );
    };
}
/*
=================
S_AL_SaveLoopPos
Remove given source as loop master if it is the master and hand off master status to another source in this case.
=================
*/

unsafe extern "C" fn S_AL_SaveLoopPos(mut dest: *mut src_t, mut alSource: crate::al_h::ALuint) {
    let mut error: i32 = 0;
    S_AL_ClearError(crate::src::qcommon::q_shared::qfalse);
    crate::src::client::qal::qalGetSourcef.expect("non-null function pointer")(
        alSource,
        0x1024,
        &mut (*dest).lastTimePos,
    );
    error = crate::src::client::qal::qalGetError.expect("non-null function pointer")();
    if error != 0 {
        // Old OpenAL implementations don't support AL_SEC_OFFSET
        if error != 0xa002 {
            crate::src::qcommon::common::Com_Printf(
                b"^3WARNING: Could not get time offset for alSource %d: %s\n\x00" as *const u8
                    as *const i8,
                alSource,
                S_AL_ErrorMsg(error),
            );
        }
        (*dest).lastTimePos = -1f32
    } else {
        (*dest).lastSampleTime = crate::src::sys::sys_unix::Sys_Milliseconds()
    };
}
/*
=================
S_AL_NewLoopMaster
Remove given source as loop master if it is the master and hand off master status to another source in this case.
=================
*/

unsafe extern "C" fn S_AL_NewLoopMaster(
    mut rmSource: *mut src_t,
    mut iskilled: crate::src::qcommon::q_shared::qboolean,
) {
    let mut index: i32 = 0;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    let mut curSfx: *mut alSfx_t = 0 as *mut alSfx_t;
    curSfx = &mut *knownSfx.as_mut_ptr().offset((*rmSource).sfx as isize) as *mut alSfx_t;
    if (*rmSource).isPlaying as u64 != 0 {
        (*curSfx).loopActiveCnt -= 1
    }
    if iskilled as u64 != 0 {
        (*curSfx).loopCnt -= 1
    }
    if (*curSfx).loopCnt != 0 {
        if (*rmSource).priority == crate::snd_local_h::SRCPRI_ENTITY {
            if iskilled as u64 == 0 && (*rmSource).isPlaying != 0 {
                // only sync ambient loops...
                // It makes more sense to have sounds for weapons/projectiles unsynced
                S_AL_SaveLoopPos(rmSource, (*rmSource).alSource);
            }
        } else if (*curSfx).masterLoopSrc != -(1)
            && rmSource
                == &mut *srcList
                    .as_mut_ptr()
                    .offset((*curSfx).masterLoopSrc as isize) as *mut src_t
        {
            let mut firstInactive: i32 = -(1);
            // Only if rmSource was the master and if there are still playing loops for
            // this sound will we need to find a new master.
            if iskilled != 0 || (*curSfx).loopActiveCnt != 0 {
                index = 0;
                while index < srcCount {
                    curSource = &mut *srcList.as_mut_ptr().offset(index as isize) as *mut src_t;
                    if (*curSource).sfx == (*rmSource).sfx
                        && curSource != rmSource
                        && (*curSource).isActive != 0
                        && (*curSource).isLooping != 0
                        && (*curSource).priority == crate::snd_local_h::SRCPRI_AMBIENT
                    {
                        if (*curSource).isPlaying as u64 != 0 {
                            (*curSfx).masterLoopSrc = index;
                            break;
                        } else if firstInactive < 0 {
                            firstInactive = index
                        }
                    }
                    index += 1
                }
            }
            if (*curSfx).loopActiveCnt == 0 {
                if firstInactive < 0 {
                    if iskilled as u64 != 0 {
                        (*curSfx).masterLoopSrc = -(1);
                        return;
                    } else {
                        curSource = rmSource
                    }
                } else {
                    curSource =
                        &mut *srcList.as_mut_ptr().offset(firstInactive as isize) as *mut src_t
                }
                if (*rmSource).isPlaying as u64 != 0 {
                    // this was the last not stopped source, save last sample position + time
                    S_AL_SaveLoopPos(curSource, (*rmSource).alSource);
                } else {
                    // second case: all loops using this sound have stopped due to listener being of of range,
                    // and now the inactive master gets deleted. Just move over the soundpos settings to the
                    // new master.
                    (*curSource).lastTimePos = (*rmSource).lastTimePos;
                    (*curSource).lastSampleTime = (*rmSource).lastSampleTime
                }
            }
        }
    } else {
        (*curSfx).masterLoopSrc = -(1)
    };
}
/*
=================
S_AL_SrcKill
=================
*/

unsafe extern "C" fn S_AL_SrcKill(mut src: crate::snd_local_h::srcHandle_t) {
    let mut curSource: *mut src_t = &mut *srcList.as_mut_ptr().offset(src as isize) as *mut src_t;
    // I'm not touching it. Unlock it first.
    if (*curSource).isLocked as u64 != 0 {
        return;
    }
    // Remove the entity association and loop master status
    if (*curSource).isLooping as u64 != 0 {
        (*curSource).isLooping = crate::src::qcommon::q_shared::qfalse;
        if (*curSource).entity != -(1) {
            let mut curEnt: *mut sentity_t =
                &mut *entityList.as_mut_ptr().offset((*curSource).entity as isize)
                    as *mut sentity_t;
            (*curEnt).srcAllocated = crate::src::qcommon::q_shared::qfalse;
            (*curEnt).srcIndex = -(1);
            (*curEnt).loopAddedThisFrame = crate::src::qcommon::q_shared::qfalse;
            (*curEnt).startLoopingSound = crate::src::qcommon::q_shared::qfalse
        }
        S_AL_NewLoopMaster(curSource, crate::src::qcommon::q_shared::qtrue);
    }
    // Stop it if it's playing
    if (*curSource).isPlaying as u64 != 0 {
        crate::src::client::qal::qalSourceStop.expect("non-null function pointer")(
            (*curSource).alSource,
        );
        (*curSource).isPlaying = crate::src::qcommon::q_shared::qfalse
    }
    // Detach any buffers
    crate::src::client::qal::qalSourcei.expect("non-null function pointer")(
        (*curSource).alSource,
        0x1009,
        0,
    );
    (*curSource).sfx = 0;
    (*curSource).lastUsedTime = 0;
    (*curSource).priority = crate::snd_local_h::SRCPRI_AMBIENT;
    (*curSource).entity = -(1);
    (*curSource).channel = -(1);
    if (*curSource).isActive as u64 != 0 {
        (*curSource).isActive = crate::src::qcommon::q_shared::qfalse;
        srcActiveCnt -= 1
    }
    (*curSource).isLocked = crate::src::qcommon::q_shared::qfalse;
    (*curSource).isTracking = crate::src::qcommon::q_shared::qfalse;
    (*curSource).local = crate::src::qcommon::q_shared::qfalse;
}
/*
=================
S_AL_SrcAlloc
=================
*/

unsafe extern "C" fn S_AL_SrcAlloc(
    mut priority: crate::snd_local_h::alSrcPriority_t,
    mut _entnum: i32,
    mut _channel: i32,
) -> crate::snd_local_h::srcHandle_t {
    let mut _i: i32 = 0;
    let mut empty: i32 = -(1);
    let mut weakest: i32 = -(1);
    let mut weakest_time: i32 = crate::src::sys::sys_unix::Sys_Milliseconds();
    let mut weakest_pri: i32 = 999;
    let mut weakest_gain: f32 = 1000f32;
    let mut weakest_isplaying: crate::src::qcommon::q_shared::qboolean =
        crate::src::qcommon::q_shared::qtrue;
    let mut weakest_numloops: i32 = 0;
    let mut curSource: *mut src_t = 0 as *mut src_t;

    for i in 0..srcCount {
        curSource = &mut *srcList.as_mut_ptr().offset(i as isize) as *mut src_t;

        if !((*curSource).isLocked as u64 != 0) {
            // Is it empty or not?
            if (*curSource).isActive as u64 == 0 {
                empty = i;
                break;
            } else if (*curSource).isPlaying as u64 != 0 {
                if weakest_isplaying != 0
                    && ((*curSource).priority) < priority
                    && (((*curSource).priority) < weakest_pri as u32
                        || (*curSource).isLooping as u64 == 0
                            && ((*curSource).scaleGain < weakest_gain
                                || (*curSource).lastUsedTime < weakest_time))
                {
                    // If it has lower priority, is fainter or older, flag it as weak
                    // the last two values are only compared if it's not a looping sound, because we want to prevent two
                    // loops (loops are added EVERY frame) fighting for a slot
                    weakest_pri = (*curSource).priority as i32;
                    weakest_time = (*curSource).lastUsedTime;
                    weakest_gain = (*curSource).scaleGain;
                    weakest = i
                }
            } else {
                weakest_isplaying = crate::src::qcommon::q_shared::qfalse;
                if weakest < 0
                    || knownSfx[(*curSource).sfx as usize].loopCnt > weakest_numloops
                    || ((*curSource).priority) < weakest_pri as u32
                    || (*curSource).lastUsedTime < weakest_time
                {
                    // Sources currently not playing of course have lowest priority
                    // also try to always keep at least one loop master for every loop sound
                    weakest_pri = (*curSource).priority as i32;
                    weakest_time = (*curSource).lastUsedTime;
                    weakest_numloops = knownSfx[(*curSource).sfx as usize].loopCnt;
                    weakest = i
                }
            }
        }
    }
    if empty == -(1) {
        empty = weakest
    }
    if empty >= 0 {
        S_AL_SrcKill(empty);
        srcList[empty as usize].isActive = crate::src::qcommon::q_shared::qtrue;
        srcActiveCnt += 1
    }
    return empty;
}
/*
=================
S_AL_SrcFind

Finds an active source with matching entity and channel numbers
Returns -1 if there isn't one
=================
*/
/*
=================
S_AL_SrcLock

Locked sources will not be automatically reallocated or managed
=================
*/

unsafe extern "C" fn S_AL_SrcLock(mut src: crate::snd_local_h::srcHandle_t) {
    srcList[src as usize].isLocked = crate::src::qcommon::q_shared::qtrue;
}
/*
=================
S_AL_SrcUnlock

Once unlocked, the source may be reallocated again
=================
*/

unsafe extern "C" fn S_AL_SrcUnlock(mut src: crate::snd_local_h::srcHandle_t) {
    srcList[src as usize].isLocked = crate::src::qcommon::q_shared::qfalse;
}
/*
=================
S_AL_UpdateEntityPosition
=================
*/

unsafe extern "C" fn S_AL_UpdateEntityPosition(
    mut entityNum: i32,
    mut origin: *const crate::src::qcommon::q_shared::vec_t,
) {
    let mut sanOrigin: crate::src::qcommon::q_shared::vec3_t = [0.; 3];
    sanOrigin[0] = *origin.offset(0);
    sanOrigin[1] = *origin.offset(1);
    sanOrigin[2] = *origin.offset(2);
    _S_AL_SanitiseVector(sanOrigin.as_mut_ptr(), 1175);
    if entityNum < 0 || entityNum >= (1) << 10 {
        crate::src::qcommon::common::Com_Error(
            crate::src::qcommon::q_shared::ERR_DROP as i32,
            b"S_UpdateEntityPosition: bad entitynum %i\x00" as *const u8 as *const i8,
            entityNum,
        );
    }
    entityList[entityNum as usize].origin[0] = sanOrigin[0];
    entityList[entityNum as usize].origin[1] = sanOrigin[1];
    entityList[entityNum as usize].origin[2] = sanOrigin[2];
}
/*
=================
S_AL_CheckInput
Check whether input values from mods are out of range.
Necessary for i.g. Western Quake3 mod which is buggy.
=================
*/

unsafe extern "C" fn S_AL_CheckInput(
    mut entityNum: i32,
    mut sfx: crate::src::qcommon::q_shared::sfxHandle_t,
) -> crate::src::qcommon::q_shared::qboolean {
    if entityNum < 0 || entityNum >= (1) << 10 {
        crate::src::qcommon::common::Com_Error(
            crate::src::qcommon::q_shared::ERR_DROP as i32,
            b"ERROR: S_AL_CheckInput: bad entitynum %i\x00" as *const u8 as *const i8,
            entityNum,
        );
    }
    if sfx < 0 || sfx >= numSfx {
        crate::src::qcommon::common::Com_Printf(
            b"^1ERROR: S_AL_CheckInput: handle %i out of range\n\x00" as *const u8 as *const i8,
            sfx,
        );
        return crate::src::qcommon::q_shared::qtrue;
    }
    return crate::src::qcommon::q_shared::qfalse;
}
/*
=================
S_AL_StartLocalSound

Play a local (non-spatialized) sound effect
=================
*/

unsafe extern "C" fn S_AL_StartLocalSound(
    mut sfx: crate::src::qcommon::q_shared::sfxHandle_t,
    mut channel: i32,
) {
    let mut src: crate::snd_local_h::srcHandle_t = 0;
    if S_AL_CheckInput(0, sfx) as u64 != 0 {
        return;
    }
    // Try to grab a source
    src = S_AL_SrcAlloc(crate::snd_local_h::SRCPRI_LOCAL, -(1), channel);
    if src == -(1) {
        return;
    }
    // Set up the effect
    S_AL_SrcSetup(
        src,
        sfx,
        crate::snd_local_h::SRCPRI_LOCAL,
        -(1),
        channel,
        crate::src::qcommon::q_shared::qtrue,
    );
    // Start it playing
    srcList[src as usize].isPlaying = crate::src::qcommon::q_shared::qtrue;
    crate::src::client::qal::qalSourcePlay.expect("non-null function pointer")(
        srcList[src as usize].alSource,
    );
}
/*
=================
S_AL_StartSound

Play a one-shot sound effect
=================
*/

unsafe extern "C" fn S_AL_StartSound(
    mut origin: *mut crate::src::qcommon::q_shared::vec_t,
    mut entnum: i32,
    mut entchannel: i32,
    mut sfx: crate::src::qcommon::q_shared::sfxHandle_t,
) {
    let mut sorigin: crate::src::qcommon::q_shared::vec3_t = [0.; 3];
    let mut src: crate::snd_local_h::srcHandle_t = 0;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    if !origin.is_null() {
        if S_AL_CheckInput(0, sfx) as u64 != 0 {
            return;
        }
        sorigin[0] = *origin.offset(0);
        sorigin[1] = *origin.offset(1);
        sorigin[2] = *origin.offset(2)
    } else {
        if S_AL_CheckInput(entnum, sfx) as u64 != 0 {
            return;
        }
        if S_AL_HearingThroughEntity(entnum) as u64 != 0 {
            S_AL_StartLocalSound(sfx, entchannel);
            return;
        }
        sorigin[0] = entityList[entnum as usize].origin[0];
        sorigin[1] = entityList[entnum as usize].origin[1];
        sorigin[2] = entityList[entnum as usize].origin[2]
    }
    _S_AL_SanitiseVector(sorigin.as_mut_ptr(), 1265);
    if srcActiveCnt > 5 * srcCount / 3
        && DistanceSquared(
            sorigin.as_mut_ptr() as *const crate::src::qcommon::q_shared::vec_t,
            lastListenerOrigin.as_mut_ptr() as *const crate::src::qcommon::q_shared::vec_t,
        ) >= ((*s_alMaxDistance).value + (*s_alGraceDistance).value)
            * ((*s_alMaxDistance).value + (*s_alGraceDistance).value)
    {
        // We're getting tight on sources and source is not within hearing distance so don't add it
        return;
    }
    // Try to grab a source
    src = S_AL_SrcAlloc(crate::snd_local_h::SRCPRI_ONESHOT, entnum, entchannel);
    if src == -(1) {
        return;
    }
    S_AL_SrcSetup(
        src,
        sfx,
        crate::snd_local_h::SRCPRI_ONESHOT,
        entnum,
        entchannel,
        crate::src::qcommon::q_shared::qfalse,
    );
    curSource = &mut *srcList.as_mut_ptr().offset(src as isize) as *mut src_t;
    if origin.is_null() {
        (*curSource).isTracking = crate::src::qcommon::q_shared::qtrue
    }
    crate::src::client::qal::qalSourcefv.expect("non-null function pointer")(
        (*curSource).alSource,
        0x1004,
        sorigin.as_mut_ptr(),
    );
    S_AL_ScaleGain(curSource, sorigin.as_mut_ptr());
    // Start it playing
    (*curSource).isPlaying = crate::src::qcommon::q_shared::qtrue;
    crate::src::client::qal::qalSourcePlay.expect("non-null function pointer")(
        (*curSource).alSource,
    );
}
/*
=================
S_AL_ClearLoopingSounds
=================
*/

unsafe extern "C" fn S_AL_ClearLoopingSounds(
    mut _killall: crate::src::qcommon::q_shared::qboolean,
) {
    let mut i: i32 = 0;
    i = 0;
    while i < srcCount {
        if srcList[i as usize].isLooping != 0 && srcList[i as usize].entity != -(1) {
            entityList[srcList[i as usize].entity as usize].loopAddedThisFrame =
                crate::src::qcommon::q_shared::qfalse
        }
        i += 1
    }
}
/*
=================
S_AL_SrcLoop
=================
*/

unsafe extern "C" fn S_AL_SrcLoop(
    mut priority: crate::snd_local_h::alSrcPriority_t,
    mut sfx: crate::src::qcommon::q_shared::sfxHandle_t,
    mut origin: *const crate::src::qcommon::q_shared::vec_t,
    mut velocity: *const crate::src::qcommon::q_shared::vec_t,
    mut entityNum: i32,
) {
    let mut src: i32 = 0;
    let mut sent: *mut sentity_t =
        &mut *entityList.as_mut_ptr().offset(entityNum as isize) as *mut sentity_t;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    let mut sorigin: crate::src::qcommon::q_shared::vec3_t = [0.; 3];
    let mut svelocity: crate::src::qcommon::q_shared::vec3_t = [0.; 3];
    if S_AL_CheckInput(entityNum, sfx) as u64 != 0 {
        return;
    }
    // Do we need to allocate a new source for this entity
    if (*sent).srcAllocated as u64 == 0 {
        // Try to get a channel
        src = S_AL_SrcAlloc(priority, entityNum, -(1));
        if src == -(1) {
            crate::src::qcommon::common::Com_DPrintf(
                b"^3WARNING: Failed to allocate source for loop sfx %d on entity %d\n\x00"
                    as *const u8 as *const i8,
                sfx,
                entityNum,
            );
            return;
        }
        curSource = &mut *srcList.as_mut_ptr().offset(src as isize) as *mut src_t;
        (*sent).startLoopingSound = crate::src::qcommon::q_shared::qtrue;
        (*curSource).lastTimePos = -1f32;
        (*curSource).lastSampleTime = crate::src::sys::sys_unix::Sys_Milliseconds()
    } else {
        src = (*sent).srcIndex;
        curSource = &mut *srcList.as_mut_ptr().offset(src as isize) as *mut src_t
    }
    (*sent).srcAllocated = crate::src::qcommon::q_shared::qtrue;
    (*sent).srcIndex = src;
    (*sent).loopPriority = priority;
    (*sent).loopSfx = sfx;
    // If this is not set then the looping sound is stopped.
    (*sent).loopAddedThisFrame = crate::src::qcommon::q_shared::qtrue;
    // UGH
    // These lines should be called via S_AL_SrcSetup, but we
    // can't call that yet as it buffers sfxes that may change
    // with subsequent calls to S_AL_SrcLoop
    (*curSource).entity = entityNum;
    (*curSource).isLooping = crate::src::qcommon::q_shared::qtrue;
    if S_AL_HearingThroughEntity(entityNum) as u64 != 0 {
        (*curSource).local = crate::src::qcommon::q_shared::qtrue;
        sorigin[2] = 0f32;
        sorigin[1] = sorigin[2];
        sorigin[0] = sorigin[1];
        crate::src::client::qal::qalSourcefv.expect("non-null function pointer")(
            (*curSource).alSource,
            0x1004,
            sorigin.as_mut_ptr(),
        );
        crate::src::client::qal::qalSourcefv.expect("non-null function pointer")(
            (*curSource).alSource,
            0x1006i32,
            crate::src::qcommon::q_math::vec3_origin.as_mut_ptr(),
        );
    } else {
        (*curSource).local = crate::src::qcommon::q_shared::qfalse;
        if !origin.is_null() {
            sorigin[0] = *origin.offset(0);
            sorigin[1] = *origin.offset(1);
            sorigin[2] = *origin.offset(2)
        } else {
            sorigin[0] = (*sent).origin[0];
            sorigin[1] = (*sent).origin[1];
            sorigin[2] = (*sent).origin[2]
        }
        _S_AL_SanitiseVector(sorigin.as_mut_ptr(), 1386);
        (*curSource).loopSpeakerPos[0] = sorigin[0];
        (*curSource).loopSpeakerPos[1] = sorigin[1];
        (*curSource).loopSpeakerPos[2] = sorigin[2];
        if !velocity.is_null() {
            svelocity[0] = *velocity.offset(0);
            svelocity[1] = *velocity.offset(1);
            svelocity[2] = *velocity.offset(2);
            _S_AL_SanitiseVector(svelocity.as_mut_ptr(), 1393i32);
        } else {
            svelocity[2] = 0f32;
            svelocity[1] = svelocity[2];
            svelocity[0] = svelocity[1]
        }
        crate::src::client::qal::qalSourcefv.expect("non-null function pointer")(
            (*curSource).alSource,
            0x1004,
            sorigin.as_mut_ptr(),
        );
        crate::src::client::qal::qalSourcefv.expect("non-null function pointer")(
            (*curSource).alSource,
            0x1006i32,
            svelocity.as_mut_ptr(),
        );
    };
}
/*
=================
S_AL_AddLoopingSound
=================
*/

unsafe extern "C" fn S_AL_AddLoopingSound(
    mut entityNum: i32,
    mut origin: *const crate::src::qcommon::q_shared::vec_t,
    mut velocity: *const crate::src::qcommon::q_shared::vec_t,
    mut sfx: crate::src::qcommon::q_shared::sfxHandle_t,
) {
    S_AL_SrcLoop(
        crate::snd_local_h::SRCPRI_ENTITY,
        sfx,
        origin,
        velocity,
        entityNum,
    );
}
/*
=================
S_AL_AddRealLoopingSound
=================
*/

unsafe extern "C" fn S_AL_AddRealLoopingSound(
    mut entityNum: i32,
    mut origin: *const crate::src::qcommon::q_shared::vec_t,
    mut velocity: *const crate::src::qcommon::q_shared::vec_t,
    mut sfx: crate::src::qcommon::q_shared::sfxHandle_t,
) {
    S_AL_SrcLoop(
        crate::snd_local_h::SRCPRI_AMBIENT,
        sfx,
        origin,
        velocity,
        entityNum,
    );
}
/*
=================
S_AL_StopLoopingSound
=================
*/

unsafe extern "C" fn S_AL_StopLoopingSound(mut entityNum: i32) {
    if entityList[entityNum as usize].srcAllocated as u64 != 0 {
        S_AL_SrcKill(entityList[entityNum as usize].srcIndex);
    };
}
/*
=================
S_AL_SrcUpdate

Update state (move things around, manage sources, and so on)
=================
*/

unsafe extern "C" fn S_AL_SrcUpdate() {
    let mut i: i32 = 0;
    let mut entityNum: i32 = 0;
    let mut state: crate::al_h::ALint = 0;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    let mut current_block_85: u64;
    i = 0;
    while i < srcCount {
        entityNum = srcList[i as usize].entity;
        curSource = &mut *srcList.as_mut_ptr().offset(i as isize) as *mut src_t;
        if !((*curSource).isLocked as u64 != 0) {
            if !((*curSource).isActive as u64 == 0) {
                // Update source parameters
                if (*s_alGain).modified != 0
                    || (*crate::src::client::snd_main::s_volume).modified != 0
                {
                    (*curSource).curGain =
                        (*s_alGain).value * (*crate::src::client::snd_main::s_volume).value
                }
                if (*s_alRolloff).modified != 0 && (*curSource).local as u64 == 0 {
                    crate::src::client::qal::qalSourcef.expect("non-null function pointer")(
                        (*curSource).alSource,
                        0x1021i32,
                        (*s_alRolloff).value,
                    );
                }
                if (*s_alMinDistance).modified as u64 != 0 {
                    crate::src::client::qal::qalSourcef.expect("non-null function pointer")(
                        (*curSource).alSource,
                        0x1020i32,
                        (*s_alMinDistance).value,
                    );
                }
                if (*curSource).isLooping as u64 != 0 {
                    let mut sent: *mut sentity_t =
                        &mut *entityList.as_mut_ptr().offset(entityNum as isize) as *mut sentity_t;
                    // If a looping effect hasn't been touched this frame, pause or kill it
                    if (*sent).loopAddedThisFrame as u64 != 0 {
                        let mut curSfx: *mut alSfx_t = 0 as *mut alSfx_t;
                        // The sound has changed without an intervening removal
                        if (*curSource).isActive != 0
                            && (*sent).startLoopingSound as u64 == 0
                            && (*curSource).sfx != (*sent).loopSfx
                        {
                            S_AL_NewLoopMaster(curSource, crate::src::qcommon::q_shared::qtrue);
                            (*curSource).isPlaying = crate::src::qcommon::q_shared::qfalse;
                            crate::src::client::qal::qalSourceStop
                                .expect("non-null function pointer")(
                                (*curSource).alSource
                            );
                            crate::src::client::qal::qalSourcei.expect("non-null function pointer")(
                                (*curSource).alSource,
                                0x1009,
                                0,
                            );
                            (*sent).startLoopingSound = crate::src::qcommon::q_shared::qtrue
                        }
                        // The sound hasn't been started yet
                        if (*sent).startLoopingSound as u64 != 0 {
                            S_AL_SrcSetup(
                                i,
                                (*sent).loopSfx,
                                (*sent).loopPriority,
                                entityNum,
                                -(1),
                                (*curSource).local,
                            );
                            (*curSource).isLooping = crate::src::qcommon::q_shared::qtrue;
                            knownSfx[(*curSource).sfx as usize].loopCnt += 1;
                            (*sent).startLoopingSound = crate::src::qcommon::q_shared::qfalse
                        }
                        curSfx = &mut *knownSfx.as_mut_ptr().offset((*curSource).sfx as isize)
                            as *mut alSfx_t;
                        S_AL_ScaleGain(curSource, (*curSource).loopSpeakerPos.as_mut_ptr());
                        if (*curSource).scaleGain == 0. {
                            if (*curSource).isPlaying as u64 != 0 {
                                // Sound is mute, stop playback until we are in range again
                                S_AL_NewLoopMaster(
                                    curSource,
                                    crate::src::qcommon::q_shared::qfalse,
                                );
                                crate::src::client::qal::qalSourceStop
                                    .expect("non-null function pointer")(
                                    (*curSource).alSource
                                );
                                (*curSource).isPlaying = crate::src::qcommon::q_shared::qfalse
                            } else if (*curSfx).loopActiveCnt == 0 && (*curSfx).masterLoopSrc < 0 {
                                (*curSfx).masterLoopSrc = i
                            }
                        } else {
                            if (*curSource).isPlaying as u64 == 0 {
                                crate::src::client::qal::qalSourcei
                                    .expect("non-null function pointer")(
                                    (*curSource).alSource,
                                    0x1007,
                                    1,
                                );
                                (*curSource).isPlaying = crate::src::qcommon::q_shared::qtrue;
                                crate::src::client::qal::qalSourcePlay
                                    .expect("non-null function pointer")(
                                    (*curSource).alSource
                                );
                                if (*curSource).priority == crate::snd_local_h::SRCPRI_AMBIENT {
                                    // If there are other ambient looping sources with the same sound,
                                    // make sure the sound of these sources are in sync.
                                    if (*curSfx).loopActiveCnt != 0 {
                                        let mut offset: i32 = 0;
                                        let mut error: i32 = 0;
                                        // we already have a master loop playing, get buffer position.
                                        S_AL_ClearError(crate::src::qcommon::q_shared::qfalse);
                                        crate::src::client::qal::qalGetSourcei
                                            .expect("non-null function pointer")(
                                            srcList[(*curSfx).masterLoopSrc as usize].alSource,
                                            0x1025,
                                            &mut offset,
                                        );
                                        error = crate::src::client::qal::qalGetError
                                            .expect("non-null function pointer")(
                                        );
                                        if error != 0 {
                                            if error != 0xa002 {
                                                crate::src::qcommon::common::Com_Printf(b"^3WARNING: Cannot get sample offset from source %d: %s\n\x00"
                                                               as *const u8 as
                                                               *const i8,
                                                           i,
                                                           S_AL_ErrorMsg(error));
                                            }
                                        } else {
                                            crate::src::client::qal::qalSourcei
                                                .expect("non-null function pointer")(
                                                (*curSource).alSource,
                                                0x1025i32,
                                                offset,
                                            );
                                        }
                                    } else if (*curSfx).loopCnt != 0 && (*curSfx).masterLoopSrc >= 0
                                    {
                                        let mut secofs: f32 = 0.;
                                        let mut master: *mut src_t = &mut *srcList
                                            .as_mut_ptr()
                                            .offset((*curSfx).masterLoopSrc as isize)
                                            as *mut src_t;
                                        // This loop sound used to be played, but all sources are stopped. Use last sample position/time
                                        // to calculate offset so the player thinks the sources continued playing while they were inaudible.
                                        if (*master).lastTimePos >= 0f32 {
                                            secofs = (*master).lastTimePos
                                                + (crate::src::sys::sys_unix::Sys_Milliseconds()
                                                    - (*master).lastSampleTime)
                                                    as f32
                                                    / 1000.0;
                                            secofs = crate::stdlib::fmodf(
                                                secofs,
                                                (*curSfx).info.samples as f32
                                                    / (*curSfx).info.rate as f32,
                                            );
                                            crate::src::client::qal::qalSourcef
                                                .expect("non-null function pointer")(
                                                (*curSource).alSource,
                                                0x1024i32,
                                                secofs,
                                            );
                                        }
                                        // I be the master now
                                        (*curSfx).masterLoopSrc = i
                                    } else {
                                        (*curSfx).masterLoopSrc = i
                                    }
                                } else if (*curSource).lastTimePos >= 0f32 {
                                    let mut secofs_0: f32 = 0.;
                                    // For unsynced loops (SRCPRI_ENTITY) just carry on playing as if the sound was never stopped
                                    secofs_0 = (*curSource).lastTimePos
                                        + (crate::src::sys::sys_unix::Sys_Milliseconds()
                                            - (*curSource).lastSampleTime)
                                            as f32
                                            / 1000.0;
                                    secofs_0 = crate::stdlib::fmodf(
                                        secofs_0,
                                        (*curSfx).info.samples as f32 / (*curSfx).info.rate as f32,
                                    );
                                    crate::src::client::qal::qalSourcef
                                        .expect("non-null function pointer")(
                                        (*curSource).alSource,
                                        0x1024i32,
                                        secofs_0,
                                    );
                                }
                                (*curSfx).loopActiveCnt += 1
                            }
                            // Update locality
                            if (*curSource).local as u64 != 0 {
                                crate::src::client::qal::qalSourcei
                                    .expect("non-null function pointer")(
                                    (*curSource).alSource,
                                    0x202,
                                    1,
                                );
                                crate::src::client::qal::qalSourcef
                                    .expect("non-null function pointer")(
                                    (*curSource).alSource,
                                    0x1021i32,
                                    0.0f32,
                                );
                            } else {
                                crate::src::client::qal::qalSourcei
                                    .expect("non-null function pointer")(
                                    (*curSource).alSource,
                                    0x202,
                                    0,
                                );
                                crate::src::client::qal::qalSourcef
                                    .expect("non-null function pointer")(
                                    (*curSource).alSource,
                                    0x1021i32,
                                    (*s_alRolloff).value,
                                );
                            }
                        }
                    } else if (*curSource).priority == crate::snd_local_h::SRCPRI_AMBIENT {
                        if (*curSource).isPlaying as u64 != 0 {
                            S_AL_NewLoopMaster(curSource, crate::src::qcommon::q_shared::qfalse);
                            crate::src::client::qal::qalSourceStop
                                .expect("non-null function pointer")(
                                (*curSource).alSource
                            );
                            (*curSource).isPlaying = crate::src::qcommon::q_shared::qfalse
                        }
                    } else {
                        S_AL_SrcKill(i);
                    }
                } else {
                    if (*curSource).isStream as u64 == 0 {
                        // Check if it's done, and flag it
                        crate::src::client::qal::qalGetSourcei.expect("non-null function pointer")(
                            (*curSource).alSource,
                            0x1010,
                            &mut state,
                        );
                        if state == 0x1014 {
                            (*curSource).isPlaying = crate::src::qcommon::q_shared::qfalse;
                            S_AL_SrcKill(i);
                            current_block_85 = 12675440807659640239;
                        } else {
                            current_block_85 = 10261677128829721533;
                        }
                    } else {
                        current_block_85 = 10261677128829721533;
                    }
                    match current_block_85 {
                        12675440807659640239 => {}
                        _ => {
                            // Query relativity of source, don't move if it's true
                            crate::src::client::qal::qalGetSourcei
                                .expect("non-null function pointer")(
                                (*curSource).alSource,
                                0x202,
                                &mut state,
                            );
                            // See if it needs to be moved
                            if (*curSource).isTracking != 0 && state == 0 {
                                crate::src::client::qal::qalSourcefv
                                    .expect("non-null function pointer")(
                                    (*curSource).alSource,
                                    0x1004,
                                    entityList[entityNum as usize].origin.as_mut_ptr(),
                                );
                                S_AL_ScaleGain(
                                    curSource,
                                    entityList[entityNum as usize].origin.as_mut_ptr(),
                                );
                            }
                        }
                    }
                }
            }
        }
        i += 1
    }
}
/*
=================
S_AL_SrcShutup
=================
*/

unsafe extern "C" fn S_AL_SrcShutup() {
    let mut i: i32 = 0;
    i = 0;
    while i < srcCount {
        S_AL_SrcKill(i);
        i += 1
    }
}
/*
=================
S_AL_SrcGet
=================
*/

unsafe extern "C" fn S_AL_SrcGet(mut src: crate::snd_local_h::srcHandle_t) -> crate::al_h::ALuint {
    return srcList[src as usize].alSource;
}

static mut streamSourceHandles: [crate::snd_local_h::srcHandle_t; 129] = [0; 129];

static mut streamPlaying: [crate::src::qcommon::q_shared::qboolean; 129] =
    [crate::src::qcommon::q_shared::qfalse; 129];

static mut streamSources: [crate::al_h::ALuint; 129] = [0; 129];

static mut streamBuffers: [[crate::al_h::ALuint; 20]; 129] = [[0; 20]; 129];

static mut streamNumBuffers: [i32; 129] = [0; 129];

static mut streamBufIndex: [i32; 129] = [0; 129];
/*
=================
S_AL_AllocateStreamChannel
=================
*/

unsafe extern "C" fn S_AL_AllocateStreamChannel(mut stream: i32, mut entityNum: i32) {
    let mut cursrc: crate::snd_local_h::srcHandle_t = 0;
    let mut alsrc: crate::al_h::ALuint = 0;
    if stream < 0 || stream >= 64 * 2 + 1 {
        return;
    }
    if entityNum >= 0 {
        // This is a stream that tracks an entity
        // Allocate a streamSource at normal priority
        cursrc = S_AL_SrcAlloc(crate::snd_local_h::SRCPRI_ENTITY, entityNum, 0);
        if cursrc < 0 {
            return;
        }
        S_AL_SrcSetup(
            cursrc,
            -(1),
            crate::snd_local_h::SRCPRI_ENTITY,
            entityNum,
            0,
            crate::src::qcommon::q_shared::qfalse,
        );
        alsrc = S_AL_SrcGet(cursrc);
        srcList[cursrc as usize].isTracking = crate::src::qcommon::q_shared::qtrue;
        srcList[cursrc as usize].isStream = crate::src::qcommon::q_shared::qtrue
    } else {
        // Unspatialized stream source
        // Allocate a streamSource at high priority
        cursrc = S_AL_SrcAlloc(crate::snd_local_h::SRCPRI_STREAM, -(2), 0);
        if cursrc < 0 {
            return;
        }
        alsrc = S_AL_SrcGet(cursrc);
        // Lock the streamSource so nobody else can use it, and get the raw streamSource
        S_AL_SrcLock(cursrc);
        // make sure that after unmuting the S_AL_Gain in S_Update() does not turn
        // volume up prematurely for this source
        srcList[cursrc as usize].scaleGain = 0.0;
        // Set some streamSource parameters
        crate::src::client::qal::qalSourcei.expect("non-null function pointer")(alsrc, 0x1009, 0);
        crate::src::client::qal::qalSourcei.expect("non-null function pointer")(alsrc, 0x1007, 0);
        crate::src::client::qal::qalSource3f.expect("non-null function pointer")(
            alsrc, 0x1004, 0f32, 0f32, 0f32,
        );
        crate::src::client::qal::qalSource3f.expect("non-null function pointer")(
            alsrc, 0x1006, 0f32, 0f32, 0f32,
        );
        crate::src::client::qal::qalSource3f.expect("non-null function pointer")(
            alsrc, 0x1005, 0f32, 0f32, 0f32,
        );
        crate::src::client::qal::qalSourcef.expect("non-null function pointer")(
            alsrc, 0x1021, 0f32,
        );
        crate::src::client::qal::qalSourcei.expect("non-null function pointer")(
            alsrc, 0x202i32, 1i32,
        );
    }
    streamSourceHandles[stream as usize] = cursrc;
    streamSources[stream as usize] = alsrc;
    streamNumBuffers[stream as usize] = 0;
    streamBufIndex[stream as usize] = 0;
}
/*
=================
S_AL_FreeStreamChannel
=================
*/

unsafe extern "C" fn S_AL_FreeStreamChannel(mut stream: i32) {
    if stream < 0 || stream >= 64 * 2 + 1 {
        return;
    }
    // Detach any buffers
    crate::src::client::qal::qalSourcei.expect("non-null function pointer")(
        streamSources[stream as usize],
        0x1009,
        0,
    );
    // Delete the buffers
    if streamNumBuffers[stream as usize] > 0 {
        crate::src::client::qal::qalDeleteBuffers.expect("non-null function pointer")(
            streamNumBuffers[stream as usize],
            streamBuffers[stream as usize].as_mut_ptr(),
        );
        streamNumBuffers[stream as usize] = 0
    }
    // Release the output streamSource
    S_AL_SrcUnlock(streamSourceHandles[stream as usize]);
    S_AL_SrcKill(streamSourceHandles[stream as usize]);
    streamSources[stream as usize] = 0;
    streamSourceHandles[stream as usize] = -(1);
}
/*
=================
S_AL_RawSamples
=================
*/

unsafe extern "C" fn S_AL_RawSamples(
    mut stream: i32,
    mut samples: i32,
    mut rate: i32,
    mut width: i32,
    mut channels: i32,
    mut data: *const crate::src::qcommon::q_shared::byte,
    mut volume: f32,
    mut entityNum: i32,
) {
    let mut numBuffers: i32 = 0;
    let mut buffer: crate::al_h::ALuint = 0;
    let mut format: crate::al_h::ALuint = 0;
    if stream < 0 || stream >= 64 * 2 + 1 {
        return;
    }
    format = S_AL_Format(width, channels);
    // Create the streamSource if necessary
    if streamSourceHandles[stream as usize] == -(1) {
        S_AL_AllocateStreamChannel(stream, entityNum);
        // Failed?
        if streamSourceHandles[stream as usize] == -(1) {
            crate::src::qcommon::common::Com_Printf(
                b"^1ERROR: Can\'t allocate streaming streamSource\n\x00" as *const u8 as *const i8,
            );
            return;
        }
    }
    crate::src::client::qal::qalGetSourcei.expect("non-null function pointer")(
        streamSources[stream as usize],
        0x1015,
        &mut numBuffers,
    );
    if numBuffers == 20 {
        crate::src::qcommon::common::Com_DPrintf(
            b"^1WARNING: Steam dropping raw samples, reached MAX_STREAM_BUFFERS\n\x00" as *const u8
                as *const i8,
        );
        return;
    }
    // Allocate a new AL buffer if needed
    if numBuffers == streamNumBuffers[stream as usize] {
        let mut oldBuffers: [crate::al_h::ALuint; 20] = [0; 20];
        let mut _i: i32 = 0;
        if S_AL_GenBuffers(1, &mut buffer, b"stream\x00" as *const u8 as *const i8) as u64 == 0 {
            return;
        }
        crate::stdlib::memcpy(
            oldBuffers.as_mut_ptr() as *mut libc::c_void,
            &mut *streamBuffers.as_mut_ptr().offset(stream as isize)
                as *mut [crate::al_h::ALuint; 20] as *const libc::c_void,
            ::std::mem::size_of::<[crate::al_h::ALuint; 20]>(),
        );
        // Reorder buffer array in order of oldest to newest

        for i in 0..streamNumBuffers[stream as usize] {
            streamBuffers[stream as usize][i as usize] =
                oldBuffers[((streamBufIndex[stream as usize] + i)
                    % streamNumBuffers[stream as usize]) as usize];
        }
        // Add the new buffer to end
        streamBuffers[stream as usize][streamNumBuffers[stream as usize] as usize] = buffer;
        streamBufIndex[stream as usize] = streamNumBuffers[stream as usize];
        streamNumBuffers[stream as usize] += 1
    }
    // Select next buffer in loop
    buffer = streamBuffers[stream as usize][streamBufIndex[stream as usize] as usize];
    streamBufIndex[stream as usize] =
        (streamBufIndex[stream as usize] + 1) % streamNumBuffers[stream as usize];
    // Fill buffer
    crate::src::client::qal::qalBufferData.expect("non-null function pointer")(
        buffer,
        format as crate::al_h::ALenum,
        data as *mut libc::c_void,
        samples * width * channels,
        rate,
    );
    // Shove the data onto the streamSource
    crate::src::client::qal::qalSourceQueueBuffers.expect("non-null function pointer")(
        streamSources[stream as usize],
        1,
        &mut buffer,
    );
    if entityNum < 0 {
        // Volume
        S_AL_Gain(
            streamSources[stream as usize],
            volume * (*crate::src::client::snd_main::s_volume).value * (*s_alGain).value,
        );
    }
    // Start stream
    if streamPlaying[stream as usize] as u64 == 0 {
        crate::src::client::qal::qalSourcePlay.expect("non-null function pointer")(
            streamSources[stream as usize],
        );
        streamPlaying[stream as usize] = crate::src::qcommon::q_shared::qtrue
    };
}
/*
=================
S_AL_StreamUpdate
=================
*/

unsafe extern "C" fn S_AL_StreamUpdate(mut stream: i32) {
    let mut numBuffers: i32 = 0;
    let mut state: crate::al_h::ALint = 0;
    if stream < 0 || stream >= 64 * 2 + 1 {
        return;
    }
    if streamSourceHandles[stream as usize] == -(1) {
        return;
    }
    // Un-queue any buffers
    crate::src::client::qal::qalGetSourcei.expect("non-null function pointer")(
        streamSources[stream as usize],
        0x1016,
        &mut numBuffers,
    );
    loop {
        let fresh2 = numBuffers;
        numBuffers = numBuffers - 1;
        if !(fresh2 != 0) {
            break;
        }
        let mut buffer: crate::al_h::ALuint = 0;
        crate::src::client::qal::qalSourceUnqueueBuffers.expect("non-null function pointer")(
            streamSources[stream as usize],
            1,
            &mut buffer,
        );
    }
    // Start the streamSource playing if necessary
    crate::src::client::qal::qalGetSourcei.expect("non-null function pointer")(
        streamSources[stream as usize],
        0x1015,
        &mut numBuffers,
    );
    crate::src::client::qal::qalGetSourcei.expect("non-null function pointer")(
        streamSources[stream as usize],
        0x1010,
        &mut state,
    );
    if state == 0x1014 {
        streamPlaying[stream as usize] = crate::src::qcommon::q_shared::qfalse;
        // If there are no buffers queued up, release the streamSource
        if numBuffers == 0 {
            S_AL_FreeStreamChannel(stream);
        }
    }
    if streamPlaying[stream as usize] as u64 == 0 && numBuffers != 0 {
        crate::src::client::qal::qalSourcePlay.expect("non-null function pointer")(
            streamSources[stream as usize],
        );
        streamPlaying[stream as usize] = crate::src::qcommon::q_shared::qtrue
    };
}
/*
=================
S_AL_StreamDie
=================
*/

unsafe extern "C" fn S_AL_StreamDie(mut stream: i32) {
    if stream < 0 || stream >= 64 * 2 + 1 {
        return;
    }
    if streamSourceHandles[stream as usize] == -(1) {
        return;
    }
    streamPlaying[stream as usize] = crate::src::qcommon::q_shared::qfalse;
    crate::src::client::qal::qalSourceStop.expect("non-null function pointer")(
        streamSources[stream as usize],
    );
    S_AL_FreeStreamChannel(stream);
}

static mut musicPlaying: crate::src::qcommon::q_shared::qboolean =
    crate::src::qcommon::q_shared::qfalse;

static mut musicSourceHandle: crate::snd_local_h::srcHandle_t = -(1);

static mut musicSource: crate::al_h::ALuint = 0;

static mut musicBuffers: [crate::al_h::ALuint; 4] = [0; 4];

static mut mus_stream: *mut crate::src::client::snd_codec::snd_stream_t =
    0 as *mut crate::src::client::snd_codec::snd_stream_t;

static mut intro_stream: *mut crate::src::client::snd_codec::snd_stream_t =
    0 as *mut crate::src::client::snd_codec::snd_stream_t;

static mut s_backgroundLoop: [i8; 64] = [0; 64];

static mut decode_buffer: [crate::src::qcommon::q_shared::byte; 4096] = [0; 4096];
/*
=================
S_AL_MusicSourceGet
=================
*/

unsafe extern "C" fn S_AL_MusicSourceGet() {
    // Allocate a musicSource at high priority
    musicSourceHandle = S_AL_SrcAlloc(crate::snd_local_h::SRCPRI_STREAM, -(2), 0);
    if musicSourceHandle == -(1) {
        return;
    }
    // Lock the musicSource so nobody else can use it, and get the raw musicSource
    S_AL_SrcLock(musicSourceHandle);
    musicSource = S_AL_SrcGet(musicSourceHandle);
    // make sure that after unmuting the S_AL_Gain in S_Update() does not turn
    // volume up prematurely for this source
    srcList[musicSourceHandle as usize].scaleGain = 0.0;
    // Set some musicSource parameters
    crate::src::client::qal::qalSource3f.expect("non-null function pointer")(
        musicSource,
        0x1004,
        0f32,
        0f32,
        0f32,
    );
    crate::src::client::qal::qalSource3f.expect("non-null function pointer")(
        musicSource,
        0x1006,
        0f32,
        0f32,
        0f32,
    );
    crate::src::client::qal::qalSource3f.expect("non-null function pointer")(
        musicSource,
        0x1005,
        0f32,
        0f32,
        0f32,
    );
    crate::src::client::qal::qalSourcef.expect("non-null function pointer")(
        musicSource,
        0x1021,
        0f32,
    );
    crate::src::client::qal::qalSourcei.expect("non-null function pointer")(musicSource, 0x202, 1);
}
/*
=================
S_AL_MusicSourceFree
=================
*/

unsafe extern "C" fn S_AL_MusicSourceFree() {
    // Release the output musicSource
    S_AL_SrcUnlock(musicSourceHandle);
    S_AL_SrcKill(musicSourceHandle);
    musicSource = 0;
    musicSourceHandle = -(1);
}
/*
=================
S_AL_CloseMusicFiles
=================
*/

unsafe extern "C" fn S_AL_CloseMusicFiles() {
    if !intro_stream.is_null() {
        crate::src::client::snd_codec::S_CodecCloseStream(intro_stream);
        intro_stream = 0 as *mut crate::src::client::snd_codec::snd_stream_t
    }
    if !mus_stream.is_null() {
        crate::src::client::snd_codec::S_CodecCloseStream(mus_stream);
        mus_stream = 0 as *mut crate::src::client::snd_codec::snd_stream_t
    };
}
/*
=================
S_AL_StopBackgroundTrack
=================
*/

unsafe extern "C" fn S_AL_StopBackgroundTrack() {
    if musicPlaying as u64 == 0 {
        return;
    }
    // Stop playing
    crate::src::client::qal::qalSourceStop.expect("non-null function pointer")(musicSource);
    // Detach any buffers
    crate::src::client::qal::qalSourcei.expect("non-null function pointer")(musicSource, 0x1009, 0);
    // Delete the buffers
    crate::src::client::qal::qalDeleteBuffers.expect("non-null function pointer")(
        4,
        musicBuffers.as_mut_ptr(),
    );
    // Free the musicSource
    S_AL_MusicSourceFree();
    // Unload the stream
    S_AL_CloseMusicFiles();
    musicPlaying = crate::src::qcommon::q_shared::qfalse;
}
/*
=================
S_AL_MusicProcess
=================
*/

unsafe extern "C" fn S_AL_MusicProcess(mut b: crate::al_h::ALuint) {
    let mut error: crate::al_h::ALenum = 0;
    let mut l: i32 = 0;
    let mut format: crate::al_h::ALuint = 0;
    let mut curstream: *mut crate::src::client::snd_codec::snd_stream_t =
        0 as *mut crate::src::client::snd_codec::snd_stream_t;
    S_AL_ClearError(crate::src::qcommon::q_shared::qfalse);
    if !intro_stream.is_null() {
        curstream = intro_stream
    } else {
        curstream = mus_stream
    }
    if curstream.is_null() {
        return;
    }
    l = crate::src::client::snd_codec::S_CodecReadStream(
        curstream,
        4096,
        decode_buffer.as_mut_ptr() as *mut libc::c_void,
    );
    // Run out data to read, start at the beginning again
    if l == 0 {
        crate::src::client::snd_codec::S_CodecCloseStream(curstream);
        // the intro stream just finished playing so we don't need to reopen
        // the music stream.
        if !intro_stream.is_null() {
            intro_stream = 0 as *mut crate::src::client::snd_codec::snd_stream_t
        } else {
            mus_stream =
                crate::src::client::snd_codec::S_CodecOpenStream(s_backgroundLoop.as_mut_ptr())
        }
        curstream = mus_stream;
        if curstream.is_null() {
            S_AL_StopBackgroundTrack();
            return;
        }
        l = crate::src::client::snd_codec::S_CodecReadStream(
            curstream,
            4096,
            decode_buffer.as_mut_ptr() as *mut libc::c_void,
        )
    }
    format = S_AL_Format((*curstream).info.width, (*curstream).info.channels);
    if l == 0 {
        // We have no data to buffer, so buffer silence
        let mut dummyData: [crate::src::qcommon::q_shared::byte; 2] = [0, 0];
        crate::src::client::qal::qalBufferData.expect("non-null function pointer")(
            b,
            0x1101i32,
            dummyData.as_mut_ptr() as *mut libc::c_void,
            2i32,
            22050i32,
        );
    } else {
        crate::src::client::qal::qalBufferData.expect("non-null function pointer")(
            b,
            format as crate::al_h::ALenum,
            decode_buffer.as_mut_ptr() as *const libc::c_void,
            l,
            (*curstream).info.rate,
        );
    }
    error = crate::src::client::qal::qalGetError.expect("non-null function pointer")();
    if error != 0 {
        S_AL_StopBackgroundTrack();
        crate::src::qcommon::common::Com_Printf(
            b"^1ERROR: while buffering data for music stream - %s\n\x00" as *const u8 as *const i8,
            S_AL_ErrorMsg(error),
        );
        return;
    };
}
/*
=================
S_AL_StartBackgroundTrack
=================
*/

unsafe extern "C" fn S_AL_StartBackgroundTrack(mut intro: *const i8, mut loop_0: *const i8) {
    let mut _i: i32 = 0;
    let mut issame: crate::src::qcommon::q_shared::qboolean = crate::src::qcommon::q_shared::qfalse;
    // Stop any existing music that might be playing
    S_AL_StopBackgroundTrack();
    if (intro.is_null() || *intro == 0) && (loop_0.is_null() || *loop_0 == 0) {
        return;
    }
    // Allocate a musicSource
    S_AL_MusicSourceGet();
    if musicSourceHandle == -(1) {
        return;
    }
    if loop_0.is_null() || *loop_0 == 0 {
        loop_0 = intro;
        issame = crate::src::qcommon::q_shared::qtrue
    } else if !intro.is_null() && *intro as i32 != 0 && crate::stdlib::strcmp(intro, loop_0) == 0 {
        issame = crate::src::qcommon::q_shared::qtrue
    } else {
        issame = crate::src::qcommon::q_shared::qfalse
    }
    // Copy the loop over
    crate::src::qcommon::q_shared::Q_strncpyz(
        s_backgroundLoop.as_mut_ptr(),
        loop_0,
        ::std::mem::size_of::<[i8; 64]>() as i32,
    );
    if issame as u64 == 0 {
        // Open the intro and don't mind whether it succeeds.
        // The important part is the loop.
        intro_stream = crate::src::client::snd_codec::S_CodecOpenStream(intro)
    } else {
        intro_stream = 0 as *mut crate::src::client::snd_codec::snd_stream_t
    }
    mus_stream = crate::src::client::snd_codec::S_CodecOpenStream(s_backgroundLoop.as_mut_ptr());
    if mus_stream.is_null() {
        S_AL_CloseMusicFiles();
        S_AL_MusicSourceFree();
        return;
    }
    // Generate the musicBuffers
    if S_AL_GenBuffers(
        4,
        musicBuffers.as_mut_ptr(),
        b"music\x00" as *const u8 as *const i8,
    ) as u64
        == 0
    {
        return;
    }
    // Queue the musicBuffers up

    for i in 0..4 {
        S_AL_MusicProcess(musicBuffers[i as usize]);
    }
    crate::src::client::qal::qalSourceQueueBuffers.expect("non-null function pointer")(
        musicSource,
        4,
        musicBuffers.as_mut_ptr(),
    );
    // Set the initial gain property
    S_AL_Gain(
        musicSource,
        (*s_alGain).value * (*crate::src::client::snd_main::s_musicVolume).value,
    );
    // Start playing
    crate::src::client::qal::qalSourcePlay.expect("non-null function pointer")(musicSource);
    musicPlaying = crate::src::qcommon::q_shared::qtrue;
}
/*
=================
S_AL_MusicUpdate
=================
*/

unsafe extern "C" fn S_AL_MusicUpdate() {
    let mut numBuffers: i32 = 0;
    let mut state: crate::al_h::ALint = 0;
    if musicPlaying as u64 == 0 {
        return;
    }
    crate::src::client::qal::qalGetSourcei.expect("non-null function pointer")(
        musicSource,
        0x1016,
        &mut numBuffers,
    );
    loop {
        let fresh3 = numBuffers;
        numBuffers = numBuffers - 1;
        if !(fresh3 != 0) {
            break;
        }
        let mut b: crate::al_h::ALuint = 0;
        crate::src::client::qal::qalSourceUnqueueBuffers.expect("non-null function pointer")(
            musicSource,
            1,
            &mut b,
        );
        S_AL_MusicProcess(b);
        crate::src::client::qal::qalSourceQueueBuffers.expect("non-null function pointer")(
            musicSource,
            1,
            &mut b,
        );
    }
    // Hitches can cause OpenAL to be starved of buffers when streaming.
    // If this happens, it will stop playback. This restarts the source if
    // it is no longer playing, and if there are buffers available
    crate::src::client::qal::qalGetSourcei.expect("non-null function pointer")(
        musicSource,
        0x1010,
        &mut state,
    );
    crate::src::client::qal::qalGetSourcei.expect("non-null function pointer")(
        musicSource,
        0x1015,
        &mut numBuffers,
    );
    if state == 0x1014 && numBuffers != 0 {
        crate::src::qcommon::common::Com_DPrintf(
            b"^3Restarted OpenAL music\n\x00" as *const u8 as *const i8,
        );
        crate::src::client::qal::qalSourcePlay.expect("non-null function pointer")(musicSource);
    }
    // Set the gain property
    S_AL_Gain(
        musicSource,
        (*s_alGain).value * (*crate::src::client::snd_main::s_musicVolume).value,
    );
}
//===========================================================================
// Local state variables

static mut alDevice: *mut crate::alc_h::ALCdevice = 0 as *mut crate::alc_h::ALCdevice;

static mut alContext: *mut crate::alc_h::ALCcontext = 0 as *mut crate::alc_h::ALCcontext;

static mut alCaptureDevice: *mut crate::alc_h::ALCdevice = 0 as *mut crate::alc_h::ALCdevice;

static mut s_alCapture: *mut crate::src::qcommon::q_shared::cvar_t =
    0 as *mut crate::src::qcommon::q_shared::cvar_t;
/*
=================
S_AL_StopAllSounds
=================
*/

unsafe extern "C" fn S_AL_StopAllSounds() {
    let mut i: i32 = 0;
    S_AL_SrcShutup();
    S_AL_StopBackgroundTrack();
    i = 0;
    while i < 64 * 2 + 1 {
        S_AL_StreamDie(i);
        i += 1
    }
}
/*
=================
S_AL_Respatialize
=================
*/

unsafe extern "C" fn S_AL_Respatialize(
    mut entityNum: i32,
    mut origin: *const crate::src::qcommon::q_shared::vec_t,
    mut axis: *mut crate::src::qcommon::q_shared::vec3_t,
    mut _inwater: i32,
) {
    let mut orientation: [f32; 6] = [0.; 6];
    let mut sorigin: crate::src::qcommon::q_shared::vec3_t = [0.; 3];
    sorigin[0] = *origin.offset(0);
    sorigin[1] = *origin.offset(1);
    sorigin[2] = *origin.offset(2);
    _S_AL_SanitiseVector(sorigin.as_mut_ptr(), 2249);
    _S_AL_SanitiseVector((*axis.offset(0)).as_mut_ptr(), 2251);
    _S_AL_SanitiseVector((*axis.offset(1)).as_mut_ptr(), 2252);
    _S_AL_SanitiseVector((*axis.offset(2)).as_mut_ptr(), 2253);
    orientation[0] = (*axis.offset(0))[0];
    orientation[1] = (*axis.offset(0))[1];
    orientation[2] = (*axis.offset(0))[2];
    orientation[3] = (*axis.offset(2))[0];
    orientation[4] = (*axis.offset(2))[1];
    orientation[5] = (*axis.offset(2))[2];
    lastListenerNumber = entityNum;
    lastListenerOrigin[0] = sorigin[0];
    lastListenerOrigin[1] = sorigin[1];
    lastListenerOrigin[2] = sorigin[2];
    // Set OpenAL listener paramaters
    crate::src::client::qal::qalListenerfv.expect("non-null function pointer")(
        0x1004,
        sorigin.as_mut_ptr(),
    );
    crate::src::client::qal::qalListenerfv.expect("non-null function pointer")(
        0x1006,
        crate::src::qcommon::q_math::vec3_origin.as_mut_ptr(),
    );
    crate::src::client::qal::qalListenerfv.expect("non-null function pointer")(
        0x100f,
        orientation.as_mut_ptr(),
    );
}
/*
=================
S_AL_Update
=================
*/

unsafe extern "C" fn S_AL_Update() {
    let mut i: i32 = 0;
    if (*crate::src::client::snd_main::s_muted).modified as u64 != 0 {
        // muted state changed. Let S_AL_Gain turn up all sources again.
        i = 0;
        while i < srcCount {
            if srcList[i as usize].isActive as u64 != 0 {
                S_AL_Gain(srcList[i as usize].alSource, srcList[i as usize].scaleGain);
            }
            i += 1
        }
        (*crate::src::client::snd_main::s_muted).modified = crate::src::qcommon::q_shared::qfalse
    }
    // Update SFX channels
    S_AL_SrcUpdate();
    // Update streams
    i = 0;
    while i < 64 * 2 + 1 {
        S_AL_StreamUpdate(i);
        i += 1
    }
    S_AL_MusicUpdate();
    // Doppler
    if (*crate::src::client::snd_main::s_doppler).modified as u64 != 0 {
        (*s_alDopplerFactor).modified = crate::src::qcommon::q_shared::qtrue;
        (*crate::src::client::snd_main::s_doppler).modified = crate::src::qcommon::q_shared::qfalse
    }
    // Doppler parameters
    if (*s_alDopplerFactor).modified as u64 != 0 {
        if (*crate::src::client::snd_main::s_doppler).integer != 0 {
            crate::src::client::qal::qalDopplerFactor.expect("non-null function pointer")(
                (*s_alDopplerFactor).value,
            );
        } else {
            crate::src::client::qal::qalDopplerFactor.expect("non-null function pointer")(0.0f32);
        }
        (*s_alDopplerFactor).modified = crate::src::qcommon::q_shared::qfalse
    }
    if (*s_alDopplerSpeed).modified as u64 != 0 {
        crate::src::client::qal::qalSpeedOfSound.expect("non-null function pointer")(
            (*s_alDopplerSpeed).value,
        );
        (*s_alDopplerSpeed).modified = crate::src::qcommon::q_shared::qfalse
    }
    // Clear the modified flags on the other cvars
    (*s_alGain).modified = crate::src::qcommon::q_shared::qfalse;
    (*crate::src::client::snd_main::s_volume).modified = crate::src::qcommon::q_shared::qfalse;
    (*crate::src::client::snd_main::s_musicVolume).modified = crate::src::qcommon::q_shared::qfalse;
    (*s_alMinDistance).modified = crate::src::qcommon::q_shared::qfalse;
    (*s_alRolloff).modified = crate::src::qcommon::q_shared::qfalse;
}
/*
=================
S_AL_DisableSounds
=================
*/

unsafe extern "C" fn S_AL_DisableSounds() {
    S_AL_StopAllSounds();
}
/*
=================
S_AL_BeginRegistration
=================
*/

unsafe extern "C" fn S_AL_BeginRegistration() {
    if numSfx == 0 {
        S_AL_BufferInit();
    };
}
/*
=================
S_AL_ClearSoundBuffer
=================
*/

unsafe extern "C" fn S_AL_ClearSoundBuffer() {}
/*
=================
S_AL_SoundList
=================
*/

unsafe extern "C" fn S_AL_SoundList() {}

unsafe extern "C" fn S_AL_StartCapture() {
    if !alCaptureDevice.is_null() {
        crate::src::client::qal::qalcCaptureStart.expect("non-null function pointer")(
            alCaptureDevice,
        );
    };
}

unsafe extern "C" fn S_AL_AvailableCaptureSamples() -> i32 {
    let mut retval: i32 = 0;
    if !alCaptureDevice.is_null() {
        let mut samples: crate::al_h::ALint = 0;
        crate::src::client::qal::qalcGetIntegerv.expect("non-null function pointer")(
            alCaptureDevice,
            0x312,
            ::std::mem::size_of::<crate::al_h::ALint>() as crate::alc_h::ALCsizei,
            &mut samples,
        );
        retval = samples
    }
    return retval;
}

unsafe extern "C" fn S_AL_Capture(
    mut samples: i32,
    mut data: *mut crate::src::qcommon::q_shared::byte,
) {
    if !alCaptureDevice.is_null() {
        crate::src::client::qal::qalcCaptureSamples.expect("non-null function pointer")(
            alCaptureDevice,
            data as *mut libc::c_void,
            samples,
        );
    };
}
#[no_mangle]

pub unsafe extern "C" fn S_AL_StopCapture() {
    if !alCaptureDevice.is_null() {
        crate::src::client::qal::qalcCaptureStop.expect("non-null function pointer")(
            alCaptureDevice,
        );
    };
}
#[no_mangle]

pub unsafe extern "C" fn S_AL_MasterGain(mut gain: f32) {
    crate::src::client::qal::qalListenerf.expect("non-null function pointer")(0x100a, gain);
}
/*
=================
S_AL_SoundInfo
=================
*/

unsafe extern "C" fn S_AL_SoundInfo() {
    crate::src::qcommon::common::Com_Printf(b"OpenAL info:\n\x00" as *const u8 as *const i8);
    crate::src::qcommon::common::Com_Printf(
        b"  Vendor:         %s\n\x00" as *const u8 as *const i8,
        crate::src::client::qal::qalGetString.expect("non-null function pointer")(0xb001i32),
    );
    crate::src::qcommon::common::Com_Printf(
        b"  Version:        %s\n\x00" as *const u8 as *const i8,
        crate::src::client::qal::qalGetString.expect("non-null function pointer")(0xb002i32),
    );
    crate::src::qcommon::common::Com_Printf(
        b"  Renderer:       %s\n\x00" as *const u8 as *const i8,
        crate::src::client::qal::qalGetString.expect("non-null function pointer")(0xb003i32),
    );
    crate::src::qcommon::common::Com_Printf(
        b"  AL Extensions:  %s\n\x00" as *const u8 as *const i8,
        crate::src::client::qal::qalGetString.expect("non-null function pointer")(0xb004i32),
    );
    crate::src::qcommon::common::Com_Printf(
        b"  ALC Extensions: %s\n\x00" as *const u8 as *const i8,
        crate::src::client::qal::qalcGetString.expect("non-null function pointer")(
            alDevice, 0x1006i32,
        ),
    );
    if enumeration_all_ext as u64 != 0 {
        crate::src::qcommon::common::Com_Printf(
            b"  Device:         %s\n\x00" as *const u8 as *const i8,
            crate::src::client::qal::qalcGetString.expect("non-null function pointer")(
                alDevice, 0x1013i32,
            ),
        );
    } else if enumeration_ext as u64 != 0 {
        crate::src::qcommon::common::Com_Printf(
            b"  Device:         %s\n\x00" as *const u8 as *const i8,
            crate::src::client::qal::qalcGetString.expect("non-null function pointer")(
                alDevice, 0x1005i32,
            ),
        );
    }
    if enumeration_all_ext != 0 || enumeration_ext != 0 {
        crate::src::qcommon::common::Com_Printf(
            b"  Available Devices:\n%s\x00" as *const u8 as *const i8,
            (*s_alAvailableDevices).string,
        );
    }
    if capture_ext as u64 != 0 {
        crate::src::qcommon::common::Com_Printf(
            b"  Input Device:   %s\n\x00" as *const u8 as *const i8,
            crate::src::client::qal::qalcGetString.expect("non-null function pointer")(
                alCaptureDevice,
                0x310i32,
            ),
        );
        crate::src::qcommon::common::Com_Printf(
            b"  Available Input Devices:\n%s\x00" as *const u8 as *const i8,
            (*s_alAvailableInputDevices).string,
        );
    };
}
/*
=================
S_AL_Shutdown
=================
*/

unsafe extern "C" fn S_AL_Shutdown() {
    // Shut down everything
    let mut i: i32 = 0;
    i = 0;
    while i < 64 * 2 + 1 {
        S_AL_StreamDie(i);
        i += 1
    }
    S_AL_StopBackgroundTrack();
    S_AL_SrcShutdown();
    S_AL_BufferShutdown();
    crate::src::client::qal::qalcDestroyContext.expect("non-null function pointer")(alContext);
    crate::src::client::qal::qalcCloseDevice.expect("non-null function pointer")(alDevice);
    if !alCaptureDevice.is_null() {
        crate::src::client::qal::qalcCaptureStop.expect("non-null function pointer")(
            alCaptureDevice,
        );
        crate::src::client::qal::qalcCaptureCloseDevice.expect("non-null function pointer")(
            alCaptureDevice,
        );
        alCaptureDevice = 0 as *mut crate::alc_h::ALCdevice;
        crate::src::qcommon::common::Com_Printf(
            b"OpenAL capture device closed.\n\x00" as *const u8 as *const i8,
        );
    }
    i = 0;
    while i < 64 * 2 + 1 {
        streamSourceHandles[i as usize] = -(1);
        streamPlaying[i as usize] = crate::src::qcommon::q_shared::qfalse;
        streamSources[i as usize] = 0;
        i += 1
    }
    crate::src::client::qal::QAL_Shutdown();
}
/*
===========================================================================
Copyright (C) 1999-2005 Id Software, Inc.

This file is part of Quake III Arena source code.

Quake III Arena source code is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

Quake III Arena source code is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Quake III Arena source code; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
===========================================================================
*/
// snd_local.h -- private sound definations
// this is in samples
// samples
// floats
// floats
// the final values will be clamped to +/- 0x00ffff00 and shifted down
/* Previous output value */
/* Index into stepsize table */
// couldn't be loaded, so use buzz
// not in Memory
// not in Memory
// mono samples in buffer
// samples with all channels in buffer (samples divided by channels)
// don't mix less than this #
//arbitrary
// START_SAMPLE_IMMEDIATE = set immediately on next mix
// to allow overriding a specific sound
// to allow overriding a specific sound
// 0-255 volume after spatialization
// 0-255 volume after spatialization
// 0-255 volume before spatialization
// only use if fixed_origin is set
// use origin instead of fetching entnum's origin
// sfx structure
// chunk starts this many bytes from file start
// Interface between Q3 sound "api" and the sound backend
/*
====================================================================

  SYSTEM SPECIFIC FUNCTIONS

====================================================================
*/
// initializes cycling through a DMA buffer and returns information on it
// gets the current DMA position
// shutdown the DMA xfer.
//====================================================================
// spatializes a channel
// adpcm functions
// wavelet function
// OpenAL stuff
// Ambient sound effects
// Entity sound effects
// One-shot sounds
// Local sounds
// Streams (music, cutscenes)
/*
=================
S_AL_Init
=================
*/
#[no_mangle]

pub unsafe extern "C" fn S_AL_Init(
    mut si: *mut crate::snd_local_h::soundInterface_t,
) -> crate::src::qcommon::q_shared::qboolean {
    let mut device: *const i8 = 0 as *const i8;
    let mut inputdevice: *const i8 = 0 as *const i8;
    let mut _i: i32 = 0;
    if si.is_null() {
        return crate::src::qcommon::q_shared::qfalse;
    }

    for i in 0..64 * 2 + 1 {
        streamSourceHandles[i as usize] = -(1);

        streamPlaying[i as usize] = crate::src::qcommon::q_shared::qfalse;

        streamSources[i as usize] = 0;

        streamNumBuffers[i as usize] = 0;

        streamBufIndex[i as usize] = 0;
    }
    // New console variables
    s_alPrecache = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alPrecache\x00" as *const u8 as *const i8,
        b"1\x00" as *const u8 as *const i8,
        0x1,
    );
    s_alGain = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alGain\x00" as *const u8 as *const i8,
        b"1.0\x00" as *const u8 as *const i8,
        0x1,
    );
    s_alSources = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alSources\x00" as *const u8 as *const i8,
        b"96\x00" as *const u8 as *const i8,
        0x1,
    );
    s_alDopplerFactor = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alDopplerFactor\x00" as *const u8 as *const i8,
        b"1.0\x00" as *const u8 as *const i8,
        0x1,
    );
    s_alDopplerSpeed = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alDopplerSpeed\x00" as *const u8 as *const i8,
        b"9000\x00" as *const u8 as *const i8,
        0x1,
    );
    s_alMinDistance = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alMinDistance\x00" as *const u8 as *const i8,
        b"120\x00" as *const u8 as *const i8,
        0x200,
    );
    s_alMaxDistance = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alMaxDistance\x00" as *const u8 as *const i8,
        b"1024\x00" as *const u8 as *const i8,
        0x200,
    );
    s_alRolloff = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alRolloff\x00" as *const u8 as *const i8,
        b"2\x00" as *const u8 as *const i8,
        0x200,
    );
    s_alGraceDistance = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alGraceDistance\x00" as *const u8 as *const i8,
        b"512\x00" as *const u8 as *const i8,
        0x200,
    );
    s_alDriver = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alDriver\x00" as *const u8 as *const i8,
        b"libopenal.so.1\x00" as *const u8 as *const i8,
        0x1 | 0x20 | 0x2000,
    );
    s_alInputDevice = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alInputDevice\x00" as *const u8 as *const i8,
        b"\x00" as *const u8 as *const i8,
        0x1 | 0x20,
    );
    s_alDevice = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alDevice\x00" as *const u8 as *const i8,
        b"\x00" as *const u8 as *const i8,
        0x1 | 0x20,
    );
    // Load QAL
    if crate::src::client::qal::QAL_Init((*s_alDriver).string) as u64 == 0 {
        crate::src::qcommon::common::Com_Printf(
            b"Failed to load library: \"%s\".\n\x00" as *const u8 as *const i8,
            (*s_alDriver).string,
        );
        if crate::src::qcommon::q_shared::Q_stricmp(
            (*s_alDriver).string,
            b"libopenal.so.1\x00" as *const u8 as *const i8,
        ) == 0
            || crate::src::client::qal::QAL_Init(b"libopenal.so.1\x00" as *const u8 as *const i8)
                as u64
                == 0
        {
            return crate::src::qcommon::q_shared::qfalse;
        }
    }
    device = (*s_alDevice).string;
    if !device.is_null() && *device == 0 {
        device = 0 as *const i8
    }
    inputdevice = (*s_alInputDevice).string;
    if !inputdevice.is_null() && *inputdevice == 0 {
        inputdevice = 0 as *const i8
    }
    // Device enumeration support
    enumeration_all_ext = crate::src::client::qal::qalcIsExtensionPresent
        .expect("non-null function pointer")(
        0 as *mut crate::alc_h::ALCdevice,
        b"ALC_ENUMERATE_ALL_EXT\x00" as *const u8 as *const i8,
    ) as crate::src::qcommon::q_shared::qboolean;
    enumeration_ext = crate::src::client::qal::qalcIsExtensionPresent
        .expect("non-null function pointer")(
        0 as *mut crate::alc_h::ALCdevice,
        b"ALC_ENUMERATION_EXT\x00" as *const u8 as *const i8,
    ) as crate::src::qcommon::q_shared::qboolean;
    if enumeration_ext != 0 || enumeration_all_ext != 0 {
        let mut devicenames: [i8; 16384] =
            *::std::mem::transmute::<&[u8; 16384],
                                     &mut [i8; 16384]>(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00");
        let mut devicelist: *const i8 = 0 as *const i8;
        let mut curlen: i32 = 0;
        // get all available devices + the default device name.
        if enumeration_all_ext as u64 != 0 {
            devicelist = crate::src::client::qal::qalcGetString.expect("non-null function pointer")(
                0 as *mut crate::alc_h::ALCdevice,
                0x1013,
            )
        } else {
            // We don't have ALC_ENUMERATE_ALL_EXT but normal enumeration.
            devicelist = crate::src::client::qal::qalcGetString.expect("non-null function pointer")(
                0 as *mut crate::alc_h::ALCdevice,
                0x1005,
            );
            enumeration_ext = crate::src::qcommon::q_shared::qtrue
        }
        // dump a list of available devices to a cvar for the user to see.
        if !devicelist.is_null() {
            loop {
                curlen = crate::stdlib::strlen(devicelist) as i32;
                if !(curlen != 0) {
                    break;
                }
                crate::src::qcommon::q_shared::Q_strcat(
                    devicenames.as_mut_ptr(),
                    ::std::mem::size_of::<[i8; 16384]>() as i32,
                    devicelist,
                );
                crate::src::qcommon::q_shared::Q_strcat(
                    devicenames.as_mut_ptr(),
                    ::std::mem::size_of::<[i8; 16384]>() as i32,
                    b"\n\x00" as *const u8 as *const i8,
                );
                devicelist = devicelist.offset((curlen + 1) as isize)
            }
        }
        s_alAvailableDevices = crate::src::qcommon::cvar::Cvar_Get(
            b"s_alAvailableDevices\x00" as *const u8 as *const i8,
            devicenames.as_mut_ptr(),
            0x40 | 0x400,
        )
    }
    alDevice = crate::src::client::qal::qalcOpenDevice.expect("non-null function pointer")(device);
    if alDevice.is_null() && !device.is_null() {
        crate::src::qcommon::common::Com_Printf(
            b"Failed to open OpenAL device \'%s\', trying default.\n\x00" as *const u8 as *const i8,
            device,
        );
        alDevice = crate::src::client::qal::qalcOpenDevice.expect("non-null function pointer")(
            0 as *const crate::alc_h::ALCchar,
        )
    }
    if alDevice.is_null() {
        crate::src::client::qal::QAL_Shutdown();
        crate::src::qcommon::common::Com_Printf(
            b"Failed to open OpenAL device.\n\x00" as *const u8 as *const i8,
        );
        return crate::src::qcommon::q_shared::qfalse;
    }
    // Create OpenAL context
    alContext = crate::src::client::qal::qalcCreateContext.expect("non-null function pointer")(
        alDevice,
        0 as *const crate::alc_h::ALCint,
    );
    if alContext.is_null() {
        crate::src::client::qal::QAL_Shutdown();
        crate::src::client::qal::qalcCloseDevice.expect("non-null function pointer")(alDevice);
        crate::src::qcommon::common::Com_Printf(
            b"Failed to create OpenAL context.\n\x00" as *const u8 as *const i8,
        );
        return crate::src::qcommon::q_shared::qfalse;
    }
    crate::src::client::qal::qalcMakeContextCurrent.expect("non-null function pointer")(alContext);
    // Initialize sources, buffers, music
    S_AL_BufferInit();
    S_AL_SrcInit();
    // Set up OpenAL parameters (doppler, etc)
    crate::src::client::qal::qalDistanceModel.expect("non-null function pointer")(0xd002);
    crate::src::client::qal::qalDopplerFactor.expect("non-null function pointer")(
        (*s_alDopplerFactor).value,
    );
    crate::src::client::qal::qalSpeedOfSound.expect("non-null function pointer")(
        (*s_alDopplerSpeed).value,
    );
    // !!! FIXME: some of these alcCaptureOpenDevice() values should be cvars.
    // !!! FIXME: add support for capture device enumeration.
    // !!! FIXME: add some better error reporting.
    s_alCapture = crate::src::qcommon::cvar::Cvar_Get(
        b"s_alCapture\x00" as *const u8 as *const i8,
        b"1\x00" as *const u8 as *const i8,
        0x1 | 0x20,
    );
    if (*s_alCapture).integer == 0 {
        crate::src::qcommon::common::Com_Printf(
            b"OpenAL capture support disabled by user (\'+set s_alCapture 1\' to enable)\n\x00"
                as *const u8 as *const i8,
        );
    } else if (*crate::src::client::cl_main::cl_useMumble).integer != 0 {
        crate::src::qcommon::common::Com_Printf(
            b"OpenAL capture support disabled for Mumble support\n\x00" as *const u8 as *const i8,
        );
    } else if crate::src::client::qal::qalcIsExtensionPresent.expect("non-null function pointer")(
        0 as *mut crate::alc_h::ALCdevice,
        b"ALC_EXT_capture\x00" as *const u8 as *const i8,
    ) == 0
    {
        crate::src::qcommon::common::Com_Printf(
            b"No ALC_EXT_capture support, can\'t record audio.\n\x00" as *const u8 as *const i8,
        );
    } else {
        let mut inputdevicenames: [i8; 16384] =
            *::std::mem::transmute::<&[u8; 16384],
                                     &mut [i8; 16384]>(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00");
        let mut inputdevicelist: *const i8 = 0 as *const i8;
        let mut defaultinputdevice: *const i8 = 0 as *const i8;
        let mut curlen_0: i32 = 0;
        capture_ext = crate::src::qcommon::q_shared::qtrue;
        // get all available input devices + the default input device name.
        inputdevicelist = crate::src::client::qal::qalcGetString
            .expect("non-null function pointer")(
            0 as *mut crate::alc_h::ALCdevice, 0x310
        );
        defaultinputdevice = crate::src::client::qal::qalcGetString
            .expect("non-null function pointer")(
            0 as *mut crate::alc_h::ALCdevice, 0x311
        );
        // dump a list of available devices to a cvar for the user to see.
        if !inputdevicelist.is_null() {
            loop {
                curlen_0 = crate::stdlib::strlen(inputdevicelist) as i32;
                if !(curlen_0 != 0) {
                    break;
                }
                crate::src::qcommon::q_shared::Q_strcat(
                    inputdevicenames.as_mut_ptr(),
                    ::std::mem::size_of::<[i8; 16384]>() as i32,
                    inputdevicelist,
                );
                crate::src::qcommon::q_shared::Q_strcat(
                    inputdevicenames.as_mut_ptr(),
                    ::std::mem::size_of::<[i8; 16384]>() as i32,
                    b"\n\x00" as *const u8 as *const i8,
                );
                inputdevicelist = inputdevicelist.offset((curlen_0 + 1) as isize)
            }
        }
        s_alAvailableInputDevices = crate::src::qcommon::cvar::Cvar_Get(
            b"s_alAvailableInputDevices\x00" as *const u8 as *const i8,
            inputdevicenames.as_mut_ptr(),
            0x40 | 0x400,
        );
        crate::src::qcommon::common::Com_Printf(
            b"OpenAL default capture device is \'%s\'\n\x00" as *const u8 as *const i8,
            if !defaultinputdevice.is_null() {
                defaultinputdevice
            } else {
                b"none\x00" as *const u8 as *const i8
            },
        );
        alCaptureDevice = crate::src::client::qal::qalcCaptureOpenDevice
            .expect("non-null function pointer")(
            inputdevice, 48000u32, 0x1101, 20 * 48 * 3 * 4
        );
        if alCaptureDevice.is_null() && !inputdevice.is_null() {
            crate::src::qcommon::common::Com_Printf(
                b"Failed to open OpenAL Input device \'%s\', trying default.\n\x00" as *const u8
                    as *const i8,
                inputdevice,
            );
            alCaptureDevice = crate::src::client::qal::qalcCaptureOpenDevice
                .expect("non-null function pointer")(
                0 as *const crate::alc_h::ALCchar,
                48000u32,
                0x1101,
                20 * 48 * 3 * 4,
            )
        }
        crate::src::qcommon::common::Com_Printf(
            b"OpenAL capture device %s.\n\x00" as *const u8 as *const i8,
            if alCaptureDevice.is_null() {
                b"failed to open\x00" as *const u8 as *const i8
            } else {
                b"opened\x00" as *const u8 as *const i8
            },
        );
    }
    (*si).Shutdown = Some(S_AL_Shutdown as unsafe extern "C" fn() -> ());
    (*si).StartSound = Some(
        S_AL_StartSound
            as unsafe extern "C" fn(
                _: *mut crate::src::qcommon::q_shared::vec_t,
                _: i32,
                _: i32,
                _: crate::src::qcommon::q_shared::sfxHandle_t,
            ) -> (),
    );
    (*si).StartLocalSound = Some(
        S_AL_StartLocalSound
            as unsafe extern "C" fn(_: crate::src::qcommon::q_shared::sfxHandle_t, _: i32) -> (),
    );
    (*si).StartBackgroundTrack =
        Some(S_AL_StartBackgroundTrack as unsafe extern "C" fn(_: *const i8, _: *const i8) -> ());
    (*si).StopBackgroundTrack = Some(S_AL_StopBackgroundTrack as unsafe extern "C" fn() -> ());
    (*si).RawSamples = Some(
        S_AL_RawSamples
            as unsafe extern "C" fn(
                _: i32,
                _: i32,
                _: i32,
                _: i32,
                _: i32,
                _: *const crate::src::qcommon::q_shared::byte,
                _: f32,
                _: i32,
            ) -> (),
    );
    (*si).StopAllSounds = Some(S_AL_StopAllSounds as unsafe extern "C" fn() -> ());
    (*si).ClearLoopingSounds = Some(
        S_AL_ClearLoopingSounds
            as unsafe extern "C" fn(_: crate::src::qcommon::q_shared::qboolean) -> (),
    );
    (*si).AddLoopingSound = Some(
        S_AL_AddLoopingSound
            as unsafe extern "C" fn(
                _: i32,
                _: *const crate::src::qcommon::q_shared::vec_t,
                _: *const crate::src::qcommon::q_shared::vec_t,
                _: crate::src::qcommon::q_shared::sfxHandle_t,
            ) -> (),
    );
    (*si).AddRealLoopingSound = Some(
        S_AL_AddRealLoopingSound
            as unsafe extern "C" fn(
                _: i32,
                _: *const crate::src::qcommon::q_shared::vec_t,
                _: *const crate::src::qcommon::q_shared::vec_t,
                _: crate::src::qcommon::q_shared::sfxHandle_t,
            ) -> (),
    );
    (*si).StopLoopingSound = Some(S_AL_StopLoopingSound as unsafe extern "C" fn(_: i32) -> ());
    (*si).Respatialize = Some(
        S_AL_Respatialize
            as unsafe extern "C" fn(
                _: i32,
                _: *const crate::src::qcommon::q_shared::vec_t,
                _: *mut crate::src::qcommon::q_shared::vec3_t,
                _: i32,
            ) -> (),
    );
    (*si).UpdateEntityPosition = Some(
        S_AL_UpdateEntityPosition
            as unsafe extern "C" fn(_: i32, _: *const crate::src::qcommon::q_shared::vec_t) -> (),
    );
    (*si).Update = Some(S_AL_Update as unsafe extern "C" fn() -> ());
    (*si).DisableSounds = Some(S_AL_DisableSounds as unsafe extern "C" fn() -> ());
    (*si).BeginRegistration = Some(S_AL_BeginRegistration as unsafe extern "C" fn() -> ());
    (*si).RegisterSound = Some(
        S_AL_RegisterSound
            as unsafe extern "C" fn(
                _: *const i8,
                _: crate::src::qcommon::q_shared::qboolean,
            ) -> crate::src::qcommon::q_shared::sfxHandle_t,
    );
    (*si).ClearSoundBuffer = Some(S_AL_ClearSoundBuffer as unsafe extern "C" fn() -> ());
    (*si).SoundInfo = Some(S_AL_SoundInfo as unsafe extern "C" fn() -> ());
    (*si).SoundList = Some(S_AL_SoundList as unsafe extern "C" fn() -> ());
    (*si).StartCapture = Some(S_AL_StartCapture as unsafe extern "C" fn() -> ());
    (*si).AvailableCaptureSamples =
        Some(S_AL_AvailableCaptureSamples as unsafe extern "C" fn() -> i32);
    (*si).Capture = Some(
        S_AL_Capture
            as unsafe extern "C" fn(_: i32, _: *mut crate::src::qcommon::q_shared::byte) -> (),
    );
    (*si).StopCapture = Some(S_AL_StopCapture as unsafe extern "C" fn() -> ());
    (*si).MasterGain = Some(S_AL_MasterGain as unsafe extern "C" fn(_: f32) -> ());
    return crate::src::qcommon::q_shared::qtrue;
}
